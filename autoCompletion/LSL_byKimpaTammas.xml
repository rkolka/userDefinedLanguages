<?xml version="1.0" encoding="UTF-8" ?>
<NotepadPlus>
	<AutoComplete language="LSL">
		<Environment ignoreCase="no" startFunc="(" stopFunc=")" paramSeparator="," terminal=";" />
		<KeyWord name="ACTIVE" func="no" />
		<KeyWord name="AGENT" func="no" />
		<KeyWord name="AGENT_ALWAYS_RUN" func="no" />
		<KeyWord name="AGENT_ATTACHMENTS" func="no" />
		<KeyWord name="AGENT_AUTOMATED" func="no" />
		<KeyWord name="AGENT_AUTOPILOT" func="no" />
		<KeyWord name="AGENT_AWAY" func="no" />
		<KeyWord name="AGENT_BUSY" func="no" />
		<KeyWord name="AGENT_BY_LEGACY_NAME" func="no" />
		<KeyWord name="AGENT_BY_USERNAME" func="no" />
		<KeyWord name="AGENT_CROUCHING" func="no" />
		<KeyWord name="AGENT_FLYING" func="no" />
		<KeyWord name="AGENT_IN_AIR" func="no" />
		<KeyWord name="AGENT_LIST_PARCEL" func="no" />
		<KeyWord name="AGENT_LIST_PARCEL_OWNER" func="no" />
		<KeyWord name="AGENT_LIST_REGION" func="no" />
		<KeyWord name="AGENT_MOUSELOOK" func="no" />
		<KeyWord name="AGENT_ON_OBJECT" func="no" />
		<KeyWord name="AGENT_SCRIPTED" func="no" />
		<KeyWord name="AGENT_SITTING" func="no" />
		<KeyWord name="AGENT_TYPING" func="no" />
		<KeyWord name="AGENT_WALKING" func="no" />
		<KeyWord name="ALL_SIDES" func="no" />
		<KeyWord name="ANIM_ON" func="no" />
		<KeyWord name="ATTACH_AVATAR_CENTER" func="no" />
		<KeyWord name="ATTACH_BACK" func="no" />
		<KeyWord name="ATTACH_BELLY" func="no" />
		<KeyWord name="ATTACH_CHEST" func="no" />
		<KeyWord name="ATTACH_CHIN" func="no" />
		<KeyWord name="ATTACH_FACE_JAW" func="no" />
		<KeyWord name="ATTACH_FACE_LEAR" func="no" />
		<KeyWord name="ATTACH_FACE_LEYE" func="no" />
		<KeyWord name="ATTACH_FACE_REAR" func="no" />
		<KeyWord name="ATTACH_FACE_REYE" func="no" />
		<KeyWord name="ATTACH_FACE_TONGUE" func="no" />
		<KeyWord name="ATTACH_FACE_GROIN" func="no" />
		<KeyWord name="ATTACH_HEAD" func="no" />
		<KeyWord name="ATTACH_HIND_LFOOT" func="no" />
		<KeyWord name="ATTACH_HIND_RFOOT" func="no" />
		<KeyWord name="ATTACH_HUD_BOTTOM" func="no" />
		<KeyWord name="ATTACH_HUD_BOTTOM_LEFT" func="no" />
		<KeyWord name="ATTACH_HUD_BOTTOM_RIGHT" func="no" />
		<KeyWord name="ATTACH_HUD_CENTER_1" func="no" />
		<KeyWord name="ATTACH_HUD_CENTER_2" func="no" />
		<KeyWord name="ATTACH_HUD_TOP_CENTER" func="no" />
		<KeyWord name="ATTACH_HUD_TOP_LEFT" func="no" />
		<KeyWord name="ATTACH_HUD_TOP_RIGHT" func="no" />
		<KeyWord name="ATTACH_LEAR" func="no" />
		<KeyWord name="ATTACH_LEFT_PEC" func="no" />
		<KeyWord name="ATTACH_LEYE" func="no" />
		<KeyWord name="ATTACH_LFOOT" func="no" />
		<KeyWord name="ATTACH_LHAND" func="no" />
		<KeyWord name="ATTACH_LHAND_RING1" func="no" />
		<KeyWord name="ATTACH_LHIP" func="no" />
		<KeyWord name="ATTACH_LLARM" func="no" />
		<KeyWord name="ATTACH_LLLEG" func="no" />
		<KeyWord name="ATTACH_LSHOULDER" func="no" />
		<KeyWord name="ATTACH_LUARM" func="no" />
		<KeyWord name="ATTACH_LULEG" func="no" />
		<KeyWord name="ATTACH_LWING" func="no" />
		<KeyWord name="ATTACH_MOUTH" func="no" />
		<KeyWord name="ATTACH_NECK" func="no" />
		<KeyWord name="ATTACH_NOSE" func="no" />
		<KeyWord name="ATTACH_PELVIS" func="no" />
		<KeyWord name="ATTACH_REAR" func="no" />
		<KeyWord name="ATTACH_REYE" func="no" />
		<KeyWord name="ATTACH_RFOOT" func="no" />
		<KeyWord name="ATTACH_RHAND" func="no" />
		<KeyWord name="ATTACH_RHAND_RING1" func="no" />
		<KeyWord name="ATTACH_RHIP" func="no" />
		<KeyWord name="ATTACH_RIGHT_PEC" func="no" />
		<KeyWord name="ATTACH_RLARM" func="no" />
		<KeyWord name="ATTACH_RLLEG" func="no" />
		<KeyWord name="ATTACH_RSHOULDER" func="no" />
		<KeyWord name="ATTACH_RUARM" func="no" />
		<KeyWord name="ATTACH_RULEG" func="no" />
		<KeyWord name="ATTACH_RWING" func="no" />
		<KeyWord name="ATTACH_TAIL_BASE" func="no" />
		<KeyWord name="ATTACH_TAIL_TIP" func="no" />
		<KeyWord name="AVOID_CHARACTERS" func="no" />
		<KeyWord name="AVOID_DYNAMIC_OBSTACLES" func="no" />
		<KeyWord name="AVOID_NONE" func="no" />
		<KeyWord name="CAMERA_ACTIVE" func="no" />
		<KeyWord name="CAMERA_BEHINDNESS_ANGLE" func="no" />
		<KeyWord name="CAMERA_BEHINDNESS_LAG" func="no" />
		<KeyWord name="CAMERA_DISTANCE" func="no" />
		<KeyWord name="CAMERA_FOCUS" func="no" />
		<KeyWord name="CAMERA_FOCUS_LAG" func="no" />
		<KeyWord name="CAMERA_FOCUS_LOCKED" func="no" />
		<KeyWord name="CAMERA_FOCUS_OFFSET" func="no" />
		<KeyWord name="CAMERA_FOCUS_THRESHOLD" func="no" />
		<KeyWord name="CAMERA_PITCH" func="no" />
		<KeyWord name="CAMERA_POSITION" func="no" />
		<KeyWord name="CAMERA_POSITION_LAG" func="no" />
		<KeyWord name="CAMERA_POSITION_LOCKED" func="no" />
		<KeyWord name="CAMERA_POSITION_THRESHOLD" func="no" />
		<KeyWord name="CHANGED_ALLOWED_DROP" func="no" />
		<KeyWord name="CHANGED_COLOR" func="no" />
		<KeyWord name="CHANGED_INVENTORY" func="no" />
		<KeyWord name="CHANGED_LINK" func="no" />
		<KeyWord name="CHANGED_MEDIA" func="no" />
		<KeyWord name="CHANGED_OWNER" func="no" />
		<KeyWord name="CHANGED_REGION" func="no" />
		<KeyWord name="CHANGED_REGION_START" func="no" />
		<KeyWord name="CHANGED_SCALE" func="no" />
		<KeyWord name="CHANGED_SHAPE" func="no" />
		<KeyWord name="CHANGED_TELEPORT" func="no" />
		<KeyWord name="CHANGED_TEXTURE" func="no" />
		<KeyWord name="CHARACTER_ACCOUNT_FOR_SKIPPED_FRAMES" func="no" />
		<KeyWord name="CHARACTER_AVOIDANCE_MODE" func="no" />
		<KeyWord name="CHARACTER_CMD_JUMP" func="no" />
		<KeyWord name="CHARACTER_CMD_SMOOTH_STOP" func="no" />
		<KeyWord name="CHARACTER_CMD_STOP" func="no" />
		<KeyWord name="CHARACTER_DESIRED_SPEED" func="no" />
		<KeyWord name="CHARACTER_DESIRED_TURN_SPEED" func="no" />
		<KeyWord name="CHARACTER_LENGTH" func="no" />
		<KeyWord name="CHARACTER_MAX_ACCEL" func="no" />
		<KeyWord name="CHARACTER_MAX_DECEL" func="no" />
		<KeyWord name="CHARACTER_MAX_SPEED" func="no" />
		<KeyWord name="CHARACTER_MAX_TURN_RADIUS" func="no" />
		<KeyWord name="CHARACTER_ORIENTATION" func="no" />
		<KeyWord name="CHARACTER_RADIUS" func="no" />
		<KeyWord name="CHARACTER_STAY_WITHIN_PARCEL" func="no" />
		<KeyWord name="CHARACTER_TYPE" func="no" />
		<KeyWord name="CHARACTER_TYPE_A" func="no" />
		<KeyWord name="CHARACTER_TYPE_B" func="no" />
		<KeyWord name="CHARACTER_TYPE_C" func="no" />
		<KeyWord name="CHARACTER_TYPE_D" func="no" />
		<KeyWord name="CHARACTER_TYPE_NONE" func="no" />
		<KeyWord name="CLICK_ACTION_BUY" func="no" />
		<KeyWord name="CLICK_ACTION_DISABLED" func="no" />
		<KeyWord name="CLICK_ACTION_IGNORE" func="no" />
		<KeyWord name="CLICK_ACTION_NONE" func="no" />
		<KeyWord name="CLICK_ACTION_OPEN" func="no" />
		<KeyWord name="CLICK_ACTION_OPEN_MEDIA" func="no" />
		<KeyWord name="CLICK_ACTION_PAY" func="no" />
		<KeyWord name="CLICK_ACTION_PLAY" func="no" />
		<KeyWord name="CLICK_ACTION_SIT" func="no" />
		<KeyWord name="CLICK_ACTION_TOUCH" func="no" />
		<KeyWord name="CONTENT_TYPE_ATOM" func="no" />
		<KeyWord name="CONTENT_TYPE_FORM" func="no" />
		<KeyWord name="CONTENT_TYPE_HTML" func="no" />
		<KeyWord name="CONTENT_TYPE_JSON" func="no" />
		<KeyWord name="CONTENT_TYPE_LLSD" func="no" />
		<KeyWord name="CONTENT_TYPE_RSS" func="no" />
		<KeyWord name="CONTENT_TYPE_TEXT" func="no" />
		<KeyWord name="CONTENT_TYPE_XHTML" func="no" />
		<KeyWord name="CONTENT_TYPE_XML" func="no" />
		<KeyWord name="CONTROL_BACK" func="no" />
		<KeyWord name="CONTROL_DOWN" func="no" />
		<KeyWord name="CONTROL_FWD" func="no" />
		<KeyWord name="CONTROL_LBUTTON" func="no" />
		<KeyWord name="CONTROL_LEFT" func="no" />
		<KeyWord name="CONTROL_ML_LBUTTON" func="no" />
		<KeyWord name="CONTROL_RIGHT" func="no" />
		<KeyWord name="CONTROL_ROT_LEFT" func="no" />
		<KeyWord name="CONTROL_ROT_RIGHT" func="no" />
		<KeyWord name="CONTROL_UP" func="no" />
		<KeyWord name="DATA_BORN" func="no" />
		<KeyWord name="DATA_NAME" func="no" />
		<KeyWord name="DATA_ONLINE" func="no" />
		<KeyWord name="DATA_PAYINFO" func="no" />
		<KeyWord name="DATA_SIM_POS" func="no" />
		<KeyWord name="DATA_SIM_RATING" func="no" />
		<KeyWord name="DATA_SIM_STATUS" func="no" />
		<KeyWord name="DEBUG_CHANNEL" func="no" />
		<KeyWord name="DEG_TO_RAD" func="no" />
		<KeyWord name="DENSITY" func="no" />
		<KeyWord name="ENV_INVALID_AGENT" func="no" />
		<KeyWord name="ENV_INVALID_RULE" func="no" />
		<KeyWord name="ENV_NOT_EXPERIENCE" func="no" />
		<KeyWord name="ENV_NO_ENVIRONMENT" func="no" />
		<KeyWord name="ENV_NO_EXPERIENCE_LAND" func="no" />
		<KeyWord name="ENV_NO_EXPERIENCE_PERMISSION" func="no" />
		<KeyWord name="ENV_THROTTLE" func="no" />
		<KeyWord name="ENV_VALIDATION_FAIL" func="no" />
		<KeyWord name="EOF" func="no" />
		<KeyWord name="ERR_GENERIC" func="no" />
		<KeyWord name="ERR_MALFORMED_PARAMS" func="no" />
		<KeyWord name="ERR_PARCEL_PERMISSIONS" func="no" />
		<KeyWord name="ERR_RUNTIME_PERMISSIONS" func="no" />
		<KeyWord name="ERR_THROTTLED" func="no" />
		<KeyWord name="ESTATE_ACCESS_ALLOWED_AGENT_ADD" func="no" />
		<KeyWord name="ESTATE_ACCESS_ALLOWED_AGENT_REMOVE" func="no" />
		<KeyWord name="ESTATE_ACCESS_ALLOWED_GROUP_ADD" func="no" />
		<KeyWord name="ESTATE_ACCESS_ALLOWED_GROUP_REMOVE" func="no" />
		<KeyWord name="ESTATE_ACCESS_BANNED_AGENT_ADD" func="no" />
		<KeyWord name="ESTATE_ACCESS_BANNED_AGENT_REMOVE" func="no" />
		<KeyWord name="FALSE" func="no" />
		<KeyWord name="FORCE_DIRECT_PATH" func="no" />
		<KeyWord name="FRICTION" func="no" />
		<KeyWord name="GCNP_RADIUS" func="no" />
		<KeyWord name="GCNP_STATIC" func="no" />
		<KeyWord name="GRAVITY_MULTIPLIER" func="no" />
		<KeyWord name="HORIZONTAL" func="no" />
		<KeyWord name="HTTP_BODY_MAXLENGTH" func="no" />
		<KeyWord name="HTTP_BODY_TRUNCATED" func="no" />
		<KeyWord name="HTTP_CUSTOM_HEADER" func="no" />
		<KeyWord name="HTTP_METHOD" func="no" />
		<KeyWord name="HTTP_MIMETYPE" func="no" />
		<KeyWord name="HTTP_PRAGMA_NO_CACHE" func="no" />
		<KeyWord name="HTTP_VERBOSE_THROTTLE" func="no" />
		<KeyWord name="HTTP_VERIFY_CERT" func="no" />
		<KeyWord name="INVENTORY_ALL" func="no" />
		<KeyWord name="INVENTORY_ANIMATION" func="no" />
		<KeyWord name="INVENTORY_BODYPART" func="no" />
		<KeyWord name="INVENTORY_CLOTHING" func="no" />
		<KeyWord name="INVENTORY_GESTURE" func="no" />
		<KeyWord name="INVENTORY_LANDMARK" func="no" />
		<KeyWord name="INVENTORY_NONE" func="no" />
		<KeyWord name="INVENTORY_NOTECARD" func="no" />
		<KeyWord name="INVENTORY_OBJECT" func="no" />
		<KeyWord name="INVENTORY_SCRIPT" func="no" />
		<KeyWord name="INVENTORY_SOUND" func="no" />
		<KeyWord name="INVENTORY_TEXTURE" func="no" />
		<KeyWord name="JSON_APPEND" func="no" />
		<KeyWord name="JSON_ARRAY" func="no" />
		<KeyWord name="JSON_DELETE" func="no" />
		<KeyWord name="JSON_FALSE" func="no" />
		<KeyWord name="JSON_INVALID" func="no" />
		<KeyWord name="JSON_NULL" func="no" />
		<KeyWord name="JSON_NUMBER" func="no" />
		<KeyWord name="JSON_OBJECT" func="no" />
		<KeyWord name="JSON_STRING" func="no" />
		<KeyWord name="JSON_TRUE" func="no" />
		<KeyWord name="KFM_CMD_PAUSE" func="no" />
		<KeyWord name="KFM_CMD_PLAY" func="no" />
		<KeyWord name="KFM_CMD_SET_MODE" func="no" />
		<KeyWord name="KFM_CMD_STOP" func="no" />
		<KeyWord name="KFM_COMMAND" func="no" />
		<KeyWord name="KFM_DATA" func="no" />
		<KeyWord name="KFM_FORWARD" func="no" />
		<KeyWord name="KFM_LOOP" func="no" />
		<KeyWord name="KFM_MODE" func="no" />
		<KeyWord name="KFM_PING_PONG" func="no" />
		<KeyWord name="KFM_REVERSE" func="no" />
		<KeyWord name="KFM_ROTATION" func="no" />
		<KeyWord name="KFM_TRANSLATION" func="no" />
		<KeyWord name="LAND_LEVEL" func="no" />
		<KeyWord name="LAND_LOWER" func="no" />
		<KeyWord name="LAND_NOISE" func="no" />
		<KeyWord name="LAND_RAISE" func="no" />
		<KeyWord name="LAND_REVERT" func="no" />
		<KeyWord name="LAND_SMOOTH" func="no" />
		<KeyWord name="LINKSETDATA_DELETE" func="no" />
		<KeyWord name="LINKSETDATA_EMEMORY" func="no" />
		<KeyWord name="LINKSETDATA_ENOKEY" func="no" />
		<KeyWord name="LINKSETDATA_EPROTECTED" func="no" />
		<KeyWord name="LINKSETDATA_NOTFOUND" func="no" />
		<KeyWord name="LINKSETDATA_NOUPDATE" func="no" />
		<KeyWord name="LINKSETDATA_OK" func="no" />
		<KeyWord name="LINKSETDATA_RESET" func="no" />
		<KeyWord name="LINKSETDATA_UPDATE" func="no" />
		<KeyWord name="LINK_ALL_CHILDREN" func="no" />
		<KeyWord name="LINK_ALL_OTHERS" func="no" />
		<KeyWord name="LINK_ROOT" func="no" />
		<KeyWord name="LINK_SET" func="no" />
		<KeyWord name="LINK_THIS" func="no" />
		<KeyWord name="LIST_STAT_GEOMETRIC_MEAN" func="no" />
		<KeyWord name="LIST_STAT_MAX" func="no" />
		<KeyWord name="LIST_STAT_MEAN" func="no" />
		<KeyWord name="LIST_STAT_MEDIAN" func="no" />
		<KeyWord name="LIST_STAT_MIN" func="no" />
		<KeyWord name="LIST_STAT_NUM_COUNT" func="no" />
		<KeyWord name="LIST_STAT_RANGE" func="no" />
		<KeyWord name="LIST_STAT_STD_DEV" func="no" />
		<KeyWord name="LIST_STAT_SUM" func="no" />
		<KeyWord name="LIST_STAT_SUM_SQUARES" func="no" />
		<KeyWord name="LOOP" func="no" />
		<KeyWord name="MASK_BASE" func="no" />
		<KeyWord name="MASK_EVERYONE" func="no" />
		<KeyWord name="MASK_GROUP" func="no" />
		<KeyWord name="MASK_NEXT" func="no" />
		<KeyWord name="MASK_OWNER" func="no" />
		<KeyWord name="NAK" func="no" />
		<KeyWord name="NULL_KEY" func="no" />
		<KeyWord name="OBJECT_ATTACHED_POINT" func="no" />
		<KeyWord name="OBJECT_ATTACHED_SLOTS_AVAILABLE" func="no" />
		<KeyWord name="OBJECT_BODY_SHAPE_TYPE" func="no" />
		<KeyWord name="OBJECT_CHARACTER_TIME" func="no" />
		<KeyWord name="OBJECT_CLICK_ACTION" func="no" />
		<KeyWord name="OBJECT_CREATOR" func="no" />
		<KeyWord name="OBJECT_DESC" func="no" />
		<KeyWord name="OBJECT_GROUP" func="no" />
		<KeyWord name="OBJECT_GROUP_TAG" func="no" />
		<KeyWord name="OBJECT_HOVER_HEIGT" func="no" />
		<KeyWord name="OBJECT_LAST_OWNER_ID" func="no" />
		<KeyWord name="OBJECT_NAME" func="no" />
		<KeyWord name="OBJECT_OMEGA" func="no" />
		<KeyWord name="OBJECT_OWNER" func="no" />
		<KeyWord name="OBJECT_PATHFINDING_TYPE" func="no" />
		<KeyWord name="OBJECT_PHANTOM" func="no" />
		<KeyWord name="OBJECT_PHYSICS" func="no" />
		<KeyWord name="OBJECT_PHYSICS_COST" func="no" />
		<KeyWord name="OBJECT_POS" func="no" />
		<KeyWord name="OBJECT_PRIM_COUNT" func="no" />
		<KeyWord name="OBJECT_PRIM_EQUIVALENCE" func="no" />
		<KeyWord name="OBJECT_RENDER_WEIGHT" func="no" />
		<KeyWord name="OBJECT_RETURN_PARCEL" func="no" />
		<KeyWord name="OBJECT_RETURN_PARCEL_OWNER" func="no" />
		<KeyWord name="OBJECT_RETURN_REGION" func="no" />
		<KeyWord name="OBJECT_REZZER_KEY" func="no" />
		<KeyWord name="OBJECT_ROOT" func="no" />
		<KeyWord name="OBJECT_ROT" func="no" />
		<KeyWord name="OBJECT_RUNNING_SCRIPT_COUNT" func="no" />
		<KeyWord name="OBJECT_SCRIPT_MEMORY" func="no" />
		<KeyWord name="OBJECT_SCRIPT_TIME" func="no" />
		<KeyWord name="OBJECT_SERVER_COST" func="no" />
		<KeyWord name="OBJECT_STREAMING_COST" func="no" />
		<KeyWord name="OBJECT_TEMP_ATTACHED" func="no" />
		<KeyWord name="OBJECT_TEMP_ON_REZ" func="no" />
		<KeyWord name="OBJECT_TOTAL_INVENTORY_COUNT" func="no" />
		<KeyWord name="OBJECT_TOTAL_SCRIPT_COUNT" func="no" />
		<KeyWord name="OBJECT_UNKNOWN_DETAIL" func="no" />
		<KeyWord name="OBJECT_VELOCITY" func="no" />
		<KeyWord name="OPT_AVATAR" func="no" />
		<KeyWord name="OPT_CHARACTER" func="no" />
		<KeyWord name="OPT_EXCLUSION_VOLUME" func="no" />
		<KeyWord name="OPT_LEGACY_LINKSET" func="no" />
		<KeyWord name="OPT_MATERIAL_VOLUME" func="no" />
		<KeyWord name="OPT_OTHER" func="no" />
		<KeyWord name="OPT_STATIC_OBSTACLE" func="no" />
		<KeyWord name="OPT_WALKABLE" func="no" />
		<KeyWord name="PARCEL_COUNT_GROUP" func="no" />
		<KeyWord name="PARCEL_COUNT_OTHER" func="no" />
		<KeyWord name="PARCEL_COUNT_OWNER" func="no" />
		<KeyWord name="PARCEL_COUNT_SELECTED" func="no" />
		<KeyWord name="PARCEL_COUNT_TEMP" func="no" />
		<KeyWord name="PARCEL_COUNT_TOTAL" func="no" />
		<KeyWord name="PARCEL_DETAILS_AREA" func="no" />
		<KeyWord name="PARCEL_DETAILS_DESC" func="no" />
		<KeyWord name="PARCEL_DETAILS_GROUP" func="no" />
		<KeyWord name="PARCEL_DETAILS_ID" func="no" />
		<KeyWord name="PARCEL_DETAILS_NAME" func="no" />
		<KeyWord name="PARCEL_DETAILS_OWNER" func="no" />
		<KeyWord name="PARCEL_DETAILS_SEE_AVATARS" func="no" />
		<KeyWord name="PARCEL_FLAG_ALLOW_ALL_OBJECT_ENTRY" func="no" />
		<KeyWord name="PARCEL_FLAG_ALLOW_CREATE_GROUP_OBJECTS" func="no" />
		<KeyWord name="PARCEL_FLAG_ALLOW_CREATE_OBJECTS" func="no" />
		<KeyWord name="PARCEL_FLAG_ALLOW_DAMAGE" func="no" />
		<KeyWord name="PARCEL_FLAG_ALLOW_FLY" func="no" />
		<KeyWord name="PARCEL_FLAG_ALLOW_GROUP_OBJECT_ENTRY" func="no" />
		<KeyWord name="PARCEL_FLAG_ALLOW_GROUP_SCRIPTS" func="no" />
		<KeyWord name="PARCEL_FLAG_ALLOW_LANDMARK" func="no" />
		<KeyWord name="PARCEL_FLAG_ALLOW_SCRIPTS" func="no" />
		<KeyWord name="PARCEL_FLAG_ALLOW_TERRAFORM" func="no" />
		<KeyWord name="PARCEL_FLAG_LOCAL_SOUND_ONLY" func="no" />
		<KeyWord name="PARCEL_FLAG_RESTRICT_PUSHOBJECT" func="no" />
		<KeyWord name="PARCEL_FLAG_USE_ACCESS_GROUP" func="no" />
		<KeyWord name="PARCEL_FLAG_USE_ACCESS_LIST" func="no" />
		<KeyWord name="PARCEL_FLAG_USE_BAN_LIST" func="no" />
		<KeyWord name="PARCEL_FLAG_USE_LAND_PASS_LIST" func="no" />
		<KeyWord name="PARCEL_MEDIA_COMMAND_AGENT" func="no" />
		<KeyWord name="PARCEL_MEDIA_COMMAND_AUTO_ALIGN" func="no" />
		<KeyWord name="PARCEL_MEDIA_COMMAND_DESC" func="no" />
		<KeyWord name="PARCEL_MEDIA_COMMAND_LOOP" func="no" />
		<KeyWord name="PARCEL_MEDIA_COMMAND_LOOP_SET" func="no" />
		<KeyWord name="PARCEL_MEDIA_COMMAND_PAUSE" func="no" />
		<KeyWord name="PARCEL_MEDIA_COMMAND_PLAY" func="no" />
		<KeyWord name="PARCEL_MEDIA_COMMAND_SIZE" func="no" />
		<KeyWord name="PARCEL_MEDIA_COMMAND_STOP" func="no" />
		<KeyWord name="PARCEL_MEDIA_COMMAND_TEXTURE" func="no" />
		<KeyWord name="PARCEL_MEDIA_COMMAND_TIME" func="no" />
		<KeyWord name="PARCEL_MEDIA_COMMAND_TYPE" func="no" />
		<KeyWord name="PARCEL_MEDIA_COMMAND_UNLOAD" func="no" />
		<KeyWord name="PARCEL_MEDIA_COMMAND_URL" func="no" />
		<KeyWord name="PASSIVE" func="no" />
		<KeyWord name="PASS_ALWAYS" func="no" />
		<KeyWord name="PASS_IF_NOT_HANDLED" func="no" />
		<KeyWord name="PASS_NEVER" func="no" />
		<KeyWord name="PATROL_PAUSE_AT_WAYPOINTS" func="no" />
		<KeyWord name="PAYMENT_INFO_ON_FILE" func="no" />
		<KeyWord name="PAYMENT_INFO_USED" func="no" />
		<KeyWord name="PAY_DEFAULT" func="no" />
		<KeyWord name="PAY_HIDE" func="no" />
		<KeyWord name="PERMISSION_ATTACH" func="no" />
		<KeyWord name="PERMISSION_CHANGE_LINKS" func="no" />
		<KeyWord name="PERMISSION_CONTROL_CAMERA" func="no" />
		<KeyWord name="PERMISSION_DEBIT" func="no" />
		<KeyWord name="PERMISSION_OVERRIDE_ANIMATIONS" func="no" />
		<KeyWord name="PERMISSION_RETURN_OBJECTS" func="no" />
		<KeyWord name="PERMISSION_SILENT_ESTATE_MANAGEMENT" func="no" />
		<KeyWord name="PERMISSION_TAKE_CONTROLS" func="no" />
		<KeyWord name="PERMISSION_TELEPORT" func="no" />
		<KeyWord name="PERMISSION_TRACK_CAMERA" func="no" />
		<KeyWord name="PERMISSION_TRIGGER_ANIMATION" func="no" />
		<KeyWord name="PERM_ALL" func="no" />
		<KeyWord name="PERM_COPY" func="no" />
		<KeyWord name="PERM_MODIFY" func="no" />
		<KeyWord name="PERM_MOVE" func="no" />
		<KeyWord name="PERM_TRANSFER" func="no" />
		<KeyWord name="PI" func="no" />
		<KeyWord name="PING_PONG" func="no" />
		<KeyWord name="PI_BY_TWO" func="no" />
		<KeyWord name="PRIM_ALLOW_UNSIT" func="no" />
		<KeyWord name="PRIM_ALPHA_MODE" func="no" />
		<KeyWord name="PRIM_ALPHA_MODE_BLEND" func="no" />
		<KeyWord name="PRIM_ALPHA_MODE_EMISSIVE" func="no" />
		<KeyWord name="PRIM_ALPHA_MODE_MASK" func="no" />
		<KeyWord name="PRIM_ALPHA_MODE_NONE" func="no" />
		<KeyWord name="PRIM_BUMP_BARK" func="no" />
		<KeyWord name="PRIM_BUMP_BLOBS" func="no" />
		<KeyWord name="PRIM_BUMP_BRICKS" func="no" />
		<KeyWord name="PRIM_BUMP_BRIGHT" func="no" />
		<KeyWord name="PRIM_BUMP_CHECKER" func="no" />
		<KeyWord name="PRIM_BUMP_CONCRETE" func="no" />
		<KeyWord name="PRIM_BUMP_DARK" func="no" />
		<KeyWord name="PRIM_BUMP_DISKS" func="no" />
		<KeyWord name="PRIM_BUMP_GRAVEL" func="no" />
		<KeyWord name="PRIM_BUMP_LARGETILE" func="no" />
		<KeyWord name="PRIM_BUMP_NONE" func="no" />
		<KeyWord name="PRIM_BUMP_SHINY" func="no" />
		<KeyWord name="PRIM_BUMP_SIDING" func="no" />
		<KeyWord name="PRIM_BUMP_STONE" func="no" />
		<KeyWord name="PRIM_BUMP_STUCCO" func="no" />
		<KeyWord name="PRIM_BUMP_SUCTION" func="no" />
		<KeyWord name="PRIM_BUMP_TILE" func="no" />
		<KeyWord name="PRIM_BUMP_WEAVE" func="no" />
		<KeyWord name="PRIM_BUMP_WOOD" func="no" />
		<KeyWord name="PRIM_CLICK_ACTION" func="no" />
		<KeyWord name="PRIM_COLOR" func="no" />
		<KeyWord name="PRIM_DESC" func="no" />
		<KeyWord name="PRIM_FLEXIBLE" func="no" />
		<KeyWord name="PRIM_FULLBRIGHT" func="no" />
		<KeyWord name="PRIM_GLOW" func="no" />
		<KeyWord name="PRIM_GLTF_BASE_COLOR" func="no" />
		<KeyWord name="PRIM_GLTF_EMISSIVE" func="no" />
		<KeyWord name="PRIM_GLTF_METALLIC_ROUGHNESS" func="no" />
		<KeyWord name="PRIM_GLTF_NORMAL" func="no" />
		<KeyWord name="PRIM_HOLE_CIRCLE" func="no" />
		<KeyWord name="PRIM_HOLE_DEFAULT" func="no" />
		<KeyWord name="PRIM_HOLE_SQUARE" func="no" />
		<KeyWord name="PRIM_HOLE_TRIANGLE" func="no" />
		<KeyWord name="PRIM_LINK_TARGET" func="no" />
		<KeyWord name="PRIM_MATERIAL" func="no" />
		<KeyWord name="PRIM_MATERIAL_FLESH" func="no" />
		<KeyWord name="PRIM_MATERIAL_GLASS" func="no" />
		<KeyWord name="PRIM_MATERIAL_METAL" func="no" />
		<KeyWord name="PRIM_MATERIAL_PLASTIC" func="no" />
		<KeyWord name="PRIM_MATERIAL_RUBBER" func="no" />
		<KeyWord name="PRIM_MATERIAL_STONE" func="no" />
		<KeyWord name="PRIM_MATERIAL_WOOD" func="no" />
		<KeyWord name="PRIM_MEDIA_ALT_IMAGE_ENABLE" func="no" />
		<KeyWord name="PRIM_MEDIA_AUTO_LOOP" func="no" />
		<KeyWord name="PRIM_MEDIA_AUTO_PLAY" func="no" />
		<KeyWord name="PRIM_MEDIA_AUTO_SCALE" func="no" />
		<KeyWord name="PRIM_MEDIA_AUTO_ZOOM" func="no" />
		<KeyWord name="PRIM_MEDIA_CONTROLS" func="no" />
		<KeyWord name="PRIM_MEDIA_CONTROLS_MINI" func="no" />
		<KeyWord name="PRIM_MEDIA_CONTROLS_STANDARD" func="no" />
		<KeyWord name="PRIM_MEDIA_CURRENT_URL" func="no" />
		<KeyWord name="PRIM_MEDIA_FIRST_CLICK_INTERACT" func="no" />
		<KeyWord name="PRIM_MEDIA_HEIGHT_PIXELS" func="no" />
		<KeyWord name="PRIM_MEDIA_HOME_URL" func="no" />
		<KeyWord name="PRIM_MEDIA_MAX_HEIGHT_PIXELS" func="no" />
		<KeyWord name="PRIM_MEDIA_MAX_URL_LENGTH" func="no" />
		<KeyWord name="PRIM_MEDIA_MAX_WHITELIST_COUNT" func="no" />
		<KeyWord name="PRIM_MEDIA_MAX_WHITELIST_SIZE" func="no" />
		<KeyWord name="PRIM_MEDIA_MAX_WIDTH_PIXELS" func="no" />
		<KeyWord name="PRIM_MEDIA_PARAM_MAX" func="no" />
		<KeyWord name="PRIM_MEDIA_PERMS_CONTROL" func="no" />
		<KeyWord name="PRIM_MEDIA_PERMS_INTERACT" func="no" />
		<KeyWord name="PRIM_MEDIA_PERM_ANYONE" func="no" />
		<KeyWord name="PRIM_MEDIA_PERM_GROUP" func="no" />
		<KeyWord name="PRIM_MEDIA_PERM_NONE" func="no" />
		<KeyWord name="PRIM_MEDIA_PERM_OWNER" func="no" />
		<KeyWord name="PRIM_MEDIA_WHITELIST" func="no" />
		<KeyWord name="PRIM_MEDIA_WHITELIST_ENABLE" func="no" />
		<KeyWord name="PRIM_MEDIA_WIDTH_PIXELS" func="no" />
		<KeyWord name="PRIM_NAME" func="no" />
		<KeyWord name="PRIM_NORMAL" func="no" />
		<KeyWord name="PRIM_OMEGA" func="no" />
		<KeyWord name="PRIM_PHANTOM" func="no" />
		<KeyWord name="PRIM_PHYSICS" func="no" />
		<KeyWord name="PRIM_PHYSICS_SHAPE_CONVEX" func="no" />
		<KeyWord name="PRIM_PHYSICS_SHAPE_NONE" func="no" />
		<KeyWord name="PRIM_PHYSICS_SHAPE_PRIM" func="no" />
		<KeyWord name="PRIM_PHYSICS_SHAPE_TYPE" func="no" />
		<KeyWord name="PRIM_POINT_LIGHT" func="no" />
		<KeyWord name="PRIM_POSITION" func="no" />
		<KeyWord name="PRIM_POS_LOCAL" func="no" />
		<KeyWord name="PRIM_PROJECTOR" func="no" />
		<KeyWord name="PRIM_REFLECTION_PROBE" func="no" />
		<KeyWord name="PRIM_ROTATION" func="no" />
		<KeyWord name="PRIM_ROT_LOCAL" func="no" />
		<KeyWord name="PRIM_SCRIPTED_SIT_ONLY" func="no" />
		<KeyWord name="PRIM_SCULPT_FLAG_ANIMESH" func="no" />
		<KeyWord name="PRIM_SCULPT_FLAG_INVERT" func="no" />
		<KeyWord name="PRIM_SCULPT_FLAG_MIRROR" func="no" />
		<KeyWord name="PRIM_SCULPT_TYPE_CYLINDER" func="no" />
		<KeyWord name="PRIM_SCULPT_TYPE_MASK" func="no" />
		<KeyWord name="PRIM_SCULPT_TYPE_MESH" func="no" />
		<KeyWord name="PRIM_SCULPT_TYPE_PLANE" func="no" />
		<KeyWord name="PRIM_SCULPT_TYPE_SPHERE" func="no" />
		<KeyWord name="PRIM_SCULPT_TYPE_TORUS" func="no" />
		<KeyWord name="PRIM_SHINY_HIGH" func="no" />
		<KeyWord name="PRIM_SHINY_LOW" func="no" />
		<KeyWord name="PRIM_SHINY_MEDIUM" func="no" />
		<KeyWord name="PRIM_SHINY_NONE" func="no" />
		<KeyWord name="PRIM_SIT_TARGET" func="no" />
		<KeyWord name="PRIM_SIZE" func="no" />
		<KeyWord name="PRIM_SLICE" func="no" />
		<KeyWord name="PRIM_SPECULAR" func="no" />
		<KeyWord name="PRIM_TEMP_ON_REZ" func="no" />
		<KeyWord name="PRIM_TEXGEN" func="no" />
		<KeyWord name="PRIM_TEXGEN_DEFAULT" func="no" />
		<KeyWord name="PRIM_TEXGEN_PLANAR" func="no" />
		<KeyWord name="PRIM_TEXT" func="no" />
		<KeyWord name="PRIM_TEXTURE" func="no" />
		<KeyWord name="PRIM_TYPE" func="no" />
		<KeyWord name="PRIM_TYPE_BOX" func="no" />
		<KeyWord name="PRIM_TYPE_CYLINDER" func="no" />
		<KeyWord name="PRIM_TYPE_PRISM" func="no" />
		<KeyWord name="PRIM_TYPE_RING" func="no" />
		<KeyWord name="PRIM_TYPE_SCULPT" func="no" />
		<KeyWord name="PRIM_TYPE_SPHERE" func="no" />
		<KeyWord name="PRIM_TYPE_TORUS" func="no" />
		<KeyWord name="PRIM_TYPE_TUBE" func="no" />
		<KeyWord name="PROFILE_NONE" func="no" />
		<KeyWord name="PROFILE_SCRIPT_MEMORY" func="no" />
		<KeyWord name="PSYS_PART_BF_DEST_COLOR" func="no" />
		<KeyWord name="PSYS_PART_BF_ONE" func="no" />
		<KeyWord name="PSYS_PART_BF_ONE_MINUS_DEST_COLOR" func="no" />
		<KeyWord name="PSYS_PART_BF_ONE_MINUS_SOURCE_ALPHA" func="no" />
		<KeyWord name="PSYS_PART_BF_ONE_MINUS_SOURCE_COLOR" func="no" />
		<KeyWord name="PSYS_PART_BF_SOURCE_ALPHA" func="no" />
		<KeyWord name="PSYS_PART_BF_SOURCE_COLOR" func="no" />
		<KeyWord name="PSYS_PART_BF_ZERO" func="no" />
		<KeyWord name="PSYS_PART_BLEND_FUNC_DEST" func="no" />
		<KeyWord name="PSYS_PART_BLEND_FUNC_SOURCE" func="no" />
		<KeyWord name="PSYS_PART_BOUNCE_MASK" func="no" />
		<KeyWord name="PSYS_PART_EMISSIVE_MASK" func="no" />
		<KeyWord name="PSYS_PART_END_ALPHA" func="no" />
		<KeyWord name="PSYS_PART_END_COLOR" func="no" />
		<KeyWord name="PSYS_PART_END_GLOW" func="no" />
		<KeyWord name="PSYS_PART_END_SCALE" func="no" />
		<KeyWord name="PSYS_PART_FLAGS" func="no" />
		<KeyWord name="PSYS_PART_FOLLOW_SRC_MASK" func="no" />
		<KeyWord name="PSYS_PART_FOLLOW_VELOCITY_MASK" func="no" />
		<KeyWord name="PSYS_PART_INTERP_COLOR_MASK" func="no" />
		<KeyWord name="PSYS_PART_INTERP_SCALE_MASK" func="no" />
		<KeyWord name="PSYS_PART_MAX_AGE" func="no" />
		<KeyWord name="PSYS_PART_RIBBON_MASK" func="no" />
		<KeyWord name="PSYS_PART_START_ALPHA" func="no" />
		<KeyWord name="PSYS_PART_START_COLOR" func="no" />
		<KeyWord name="PSYS_PART_START_GLOW" func="no" />
		<KeyWord name="PSYS_PART_START_SCALE" func="no" />
		<KeyWord name="PSYS_PART_TARGET_LINEAR_MASK" func="no" />
		<KeyWord name="PSYS_PART_TARGET_POS_MASK" func="no" />
		<KeyWord name="PSYS_PART_WIND_MASK" func="no" />
		<KeyWord name="PSYS_SRC_ACCEL" func="no" />
		<KeyWord name="PSYS_SRC_ANGLE_BEGIN" func="no" />
		<KeyWord name="PSYS_SRC_ANGLE_END" func="no" />
		<KeyWord name="PSYS_SRC_BURST_PART_COUNT" func="no" />
		<KeyWord name="PSYS_SRC_BURST_RADIUS" func="no" />
		<KeyWord name="PSYS_SRC_BURST_RATE" func="no" />
		<KeyWord name="PSYS_SRC_BURST_SPEED_MAX" func="no" />
		<KeyWord name="PSYS_SRC_BURST_SPEED_MIN" func="no" />
		<KeyWord name="PSYS_SRC_MAX_AGE" func="no" />
		<KeyWord name="PSYS_SRC_OMEGA" func="no" />
		<KeyWord name="PSYS_SRC_PATTERN" func="no" />
		<KeyWord name="PSYS_SRC_PATTERN_ANGLE" func="no" />
		<KeyWord name="PSYS_SRC_PATTERN_ANGLE_CONE" func="no" />
		<KeyWord name="PSYS_SRC_PATTERN_ANGLE_CONE_EMPTY" func="no" />
		<KeyWord name="PSYS_SRC_PATTERN_DROP" func="no" />
		<KeyWord name="PSYS_SRC_PATTERN_EXPLODE" func="no" />
		<KeyWord name="PSYS_SRC_TARGET_KEY" func="no" />
		<KeyWord name="PSYS_SRC_TEXTURE" func="no" />
		<KeyWord name="PUBLIC_CHANNEL" func="no" />
		<KeyWord name="PURSUIT_FUZZ_FACTOR" func="no" />
		<KeyWord name="PURSUIT_GOAL_TOLERANCE" func="no" />
		<KeyWord name="PURSUIT_INTERCEPT" func="no" />
		<KeyWord name="PURSUIT_OFFSET" func="no" />
		<KeyWord name="PU_EVADE_HIDDEN" func="no" />
		<KeyWord name="PU_EVADE_SPOTTED" func="no" />
		<KeyWord name="PU_FAILURE_DYNAMIC_PATHFINDING_DISABLED" func="no" />
		<KeyWord name="PU_FAILURE_INVALID_GOAL" func="no" />
		<KeyWord name="PU_FAILURE_INVALID_START" func="no" />
		<KeyWord name="PU_FAILURE_NO_NAVMESH" func="no" />
		<KeyWord name="PU_FAILURE_NO_VALID_DESTINATION" func="no" />
		<KeyWord name="PU_FAILURE_OTHER" func="no" />
		<KeyWord name="PU_FAILURE_PARCEL_UNREACHABLE" func="no" />
		<KeyWord name="PU_FAILURE_TARGET_GONE" func="no" />
		<KeyWord name="PU_FAILURE_UNREACHABLE" func="no" />
		<KeyWord name="PU_GOAL_REACHED" func="no" />
		<KeyWord name="PU_SLOWDOWN_DISTANCE_REACHED" func="no" />
		<KeyWord name="RAD_TO_DEG" func="no" />
		<KeyWord name="RCERR_CAST_TIME_EXCEEDED" func="no" />
		<KeyWord name="RCERR_SIM_PERF_LOW" func="no" />
		<KeyWord name="RCERR_UNKNOWN" func="no" />
		<KeyWord name="RC_DATA_FLAGS" func="no" />
		<KeyWord name="RC_DETECT_PHANTOM" func="no" />
		<KeyWord name="RC_GET_LINK_NUM" func="no" />
		<KeyWord name="RC_GET_NORMAL" func="no" />
		<KeyWord name="RC_GET_ROOT_KEY" func="no" />
		<KeyWord name="RC_MAX_HITS" func="no" />
		<KeyWord name="RC_REJECT_AGENTS" func="no" />
		<KeyWord name="RC_REJECT_LAND" func="no" />
		<KeyWord name="RC_REJECT_NONPHYSICAL" func="no" />
		<KeyWord name="RC_REJECT_PHYSICAL" func="no" />
		<KeyWord name="RC_REJECT_TYPES" func="no" />
		<KeyWord name="REGION_FLAG_ALLOW_DAMAGE" func="no" />
		<KeyWord name="REGION_FLAG_ALLOW_DIRECT_TELEPORT" func="no" />
		<KeyWord name="REGION_FLAG_BLOCK_FLY" func="no" />
		<KeyWord name="REGION_FLAG_BLOCK_TERRAFORM" func="no" />
		<KeyWord name="REGION_FLAG_DISABLE_COLLISIONS" func="no" />
		<KeyWord name="REGION_FLAG_DISABLE_PHYSICS" func="no" />
		<KeyWord name="REGION_FLAG_FIXED_SUN" func="no" />
		<KeyWord name="REGION_FLAG_RESTRICT_PUSHOBJECT" func="no" />
		<KeyWord name="REGION_FLAG_SANDBOX" func="no" />
		<KeyWord name="REMOTE_DATA_CHANNEL" func="no" />
		<KeyWord name="REMOTE_DATA_REPLY" func="no" />
		<KeyWord name="REMOTE_DATA_REQUEST" func="no" />
		<KeyWord name="REQUIRE_LINE_OF_SIGHT" func="no" />
		<KeyWord name="RESTITUTION" func="no" />
		<KeyWord name="REVERSE" func="no" />
		<KeyWord name="REZ_ACCEL" func="no" />
		<KeyWord name="REZ_DAMAGE" func="no" />
		<KeyWord name="REZ_FLAGS" func="no" />
		<KeyWord name="REZ_FLAG_BLOCK_GRAB_OBJECT" func="no" />
		<KeyWord name="REZ_FLAG_DIE_ON_COLLIDE" func="no" />
		<KeyWord name="REZ_FLAG_DIE_ON_NOENTRY" func="no" />
		<KeyWord name="REZ_FLAG_NO_COLLIDE_FAMILY" func="no" />
		<KeyWord name="REZ_FLAG_NO_COLLIDE_OWNER" func="no" />
		<KeyWord name="REZ_FLAG_PHANTOM" func="no" />
		<KeyWord name="REZ_FLAG_PHYSICAL" func="no" />
		<KeyWord name="REZ_FLAG_TEMP" func="no" />
		<KeyWord name="REZ_LOCK_AXES" func="no" />
		<KeyWord name="REZ_OMEGA" func="no" />
		<KeyWord name="REZ_PARAM" func="no" />
		<KeyWord name="REZ_POS" func="no" />
		<KeyWord name="REZ_ROT" func="no" />
		<KeyWord name="REZ_SOUND" func="no" />
		<KeyWord name="REZ_SOUND_COLLIDE" func="no" />
		<KeyWord name="REZ_VEL" func="no" />
		<KeyWord name="ROTATE" func="no" />
		<KeyWord name="SCALE" func="no" />
		<KeyWord name="SCRIPTED" func="no" />
		<KeyWord name="SIM_STAT_CHILD_AGENT_COUNT" func="no" />
		<KeyWord name="SIM_STAT_PCT_CHARS_STEPPED" func="no" />
		<KeyWord name="SIT_FLAG_ALLOW_UNSIT" func="no" />
		<KeyWord name="SIT_FLAG_NO_COLLIDE" func="no" />
		<KeyWord name="SIT_FLAG_SCRIPTED_ONLY" func="no" />
		<KeyWord name="SIT_FLAG_SIT_TARGET" func="no" />
		<KeyWord name="SIT_INVALID_AGENT" func="no" />
		<KeyWord name="SIT_INVALID_LINK" func="no" />
		<KeyWord name="SIT_INVALID_OBJECT" func="no" />
		<KeyWord name="SIT_NOT_EXPERIENCE" func="no" />
		<KeyWord name="SIT_NO_ACCESS" func="no" />
		<KeyWord name="SIT_NO_EXPERIENCE_PERMISSION" func="no" />
		<KeyWord name="SIT_NO_SIT_TARGET" func="no" />
		<KeyWord name="SKY_AMBIENT" func="no" />
		<KeyWord name="SKY_BLUE" func="no" />
		<KeyWord name="SKY_CLOUDS" func="no" />
		<KeyWord name="SKY_CLOUD_TEXTURE" func="no" />
		<KeyWord name="SKY_DOME" func="no" />
		<KeyWord name="SKY_GAMMA" func="no" />
		<KeyWord name="SKY_GLOW" func="no" />
		<KeyWord name="SKY_HAZE" func="no" />
		<KeyWord name="SKY_MOON" func="no" />
		<KeyWord name="SKY_MOON_TEXTURE" func="no" />
		<KeyWord name="SKY_PLANET" func="no" />
		<KeyWord name="SKY_REFLECTION_PROBE_AMBIANCE" func="no" />
		<KeyWord name="SKY_REFRACTION" func="no" />
		<KeyWord name="SKY_STAR_BRIGHTNESS" func="no" />
		<KeyWord name="SKY_SUN" func="no" />
		<KeyWord name="SKY_SUN_TEXTURE" func="no" />
		<KeyWord name="SMOOTH" func="no" />
		<KeyWord name="SQRT2" func="no" />
		<KeyWord name="STATUS_BLOCK_GRAB" func="no" />
		<KeyWord name="STATUS_BLOCK_GRAB_OBJECT" func="no" />
		<KeyWord name="STATUS_BOUNDS_ERROR" func="no" />
		<KeyWord name="STATUS_CAST_SHADOWS" func="no" />
		<KeyWord name="STATUS_DIE_AT_EDGE" func="no" />
		<KeyWord name="STATUS_INTERNAL_ERROR" func="no" />
		<KeyWord name="STATUS_MALFORMED_PARAMS" func="no" />
		<KeyWord name="STATUS_NOT_FOUND" func="no" />
		<KeyWord name="STATUS_NOT_SUPPORTED" func="no" />
		<KeyWord name="STATUS_OK" func="no" />
		<KeyWord name="STATUS_PHANTOM" func="no" />
		<KeyWord name="STATUS_PHYSICS" func="no" />
		<KeyWord name="STATUS_RETURN_AT_EDGE" func="no" />
		<KeyWord name="STATUS_ROTATE_X" func="no" />
		<KeyWord name="STATUS_ROTATE_Y" func="no" />
		<KeyWord name="STATUS_ROTATE_Z" func="no" />
		<KeyWord name="STATUS_SANDBOX" func="no" />
		<KeyWord name="STATUS_TYPE_MISMATCH" func="no" />
		<KeyWord name="STATUS_WHITELIST_FAILED" func="no" />
		<KeyWord name="STRING_TRIM" func="no" />
		<KeyWord name="STRING_TRIM_HEAD" func="no" />
		<KeyWord name="STRING_TRIM_TAIL" func="no" />
		<KeyWord name="TARGETED_EMAIL_OBJECT_OWNER" func="no" />
		<KeyWord name="TEXTURE_BLANK" func="no" />
		<KeyWord name="TEXTURE_DEFAULT" func="no" />
		<KeyWord name="TEXTURE_MEDIA" func="no" />
		<KeyWord name="TEXTURE_PLYWOOD" func="no" />
		<KeyWord name="TEXTURE_TRANSPARENT" func="no" />
		<KeyWord name="TOUCH_INVALID_FACE" func="no" />
		<KeyWord name="TOUCH_INVALID_TEXCOORD" func="no" />
		<KeyWord name="TOUCH_INVALID_VECTOR" func="no" />
		<KeyWord name="TRAVERSAL_TYPE" func="no" />
		<KeyWord name="TRAVERSAL_TYPE_FAST" func="no" />
		<KeyWord name="TRAVERSAL_TYPE_NONE" func="no" />
		<KeyWord name="TRAVERSAL_TYPE_SLOW" func="no" />
		<KeyWord name="TRUE" func="no" />
		<KeyWord name="TWO_PI" func="no" />
		<KeyWord name="TYPE_FLOAT" func="no" />
		<KeyWord name="TYPE_INTEGER" func="no" />
		<KeyWord name="TYPE_INVALID" func="no" />
		<KeyWord name="TYPE_KEY" func="no" />
		<KeyWord name="TYPE_ROTATION" func="no" />
		<KeyWord name="TYPE_STRING" func="no" />
		<KeyWord name="TYPE_VECTOR" func="no" />
		<KeyWord name="URL_REQUEST_DENIED" func="no" />
		<KeyWord name="URL_REQUEST_GRANTED" func="no" />
		<KeyWord name="VEHICLE_ANGULAR_DEFLECTION_EFFICIENCY" func="no" />
		<KeyWord name="VEHICLE_ANGULAR_DEFLECTION_TIMESCALE" func="no" />
		<KeyWord name="VEHICLE_ANGULAR_FRICTION_TIMESCALE" func="no" />
		<KeyWord name="VEHICLE_ANGULAR_MOTOR_DECAY_TIMESCALE" func="no" />
		<KeyWord name="VEHICLE_ANGULAR_MOTOR_DIRECTION" func="no" />
		<KeyWord name="VEHICLE_ANGULAR_MOTOR_TIMESCALE" func="no" />
		<KeyWord name="VEHICLE_BANKING_EFFICIENCY" func="no" />
		<KeyWord name="VEHICLE_BANKING_MIX" func="no" />
		<KeyWord name="VEHICLE_BANKING_TIMESCALE" func="no" />
		<KeyWord name="VEHICLE_BUOYANCY" func="no" />
		<KeyWord name="VEHICLE_FLAG_CAMERA_DECOUPLED" func="no" />
		<KeyWord name="VEHICLE_FLAG_HOVER_GLOBAL_HEIGHT" func="no" />
		<KeyWord name="VEHICLE_FLAG_HOVER_TERRAIN_ONLY" func="no" />
		<KeyWord name="VEHICLE_FLAG_HOVER_UP_ONLY" func="no" />
		<KeyWord name="VEHICLE_FLAG_HOVER_WATER_ONLY" func="no" />
		<KeyWord name="VEHICLE_FLAG_LIMIT_MOTOR_UP" func="no" />
		<KeyWord name="VEHICLE_FLAG_LIMIT_ROLL_ONLY" func="no" />
		<KeyWord name="VEHICLE_FLAG_MOUSELOOK_BANK" func="no" />
		<KeyWord name="VEHICLE_FLAG_MOUSELOOK_STEER" func="no" />
		<KeyWord name="VEHICLE_FLAG_NO_DEFLECTION_UP" func="no" />
		<KeyWord name="VEHICLE_HOVER_EFFICIENCY" func="no" />
		<KeyWord name="VEHICLE_HOVER_HEIGHT" func="no" />
		<KeyWord name="VEHICLE_HOVER_TIMESCALE" func="no" />
		<KeyWord name="VEHICLE_LINEAR_DEFLECTION_EFFICIENCY" func="no" />
		<KeyWord name="VEHICLE_LINEAR_DEFLECTION_TIMESCALE" func="no" />
		<KeyWord name="VEHICLE_LINEAR_FRICTION_TIMESCALE" func="no" />
		<KeyWord name="VEHICLE_LINEAR_MOTOR_DECAY_TIMESCALE" func="no" />
		<KeyWord name="VEHICLE_LINEAR_MOTOR_DIRECTION" func="no" />
		<KeyWord name="VEHICLE_LINEAR_MOTOR_OFFSET" func="no" />
		<KeyWord name="VEHICLE_LINEAR_MOTOR_TIMESCALE" func="no" />
		<KeyWord name="VEHICLE_REFERENCE_FRAME" func="no" />
		<KeyWord name="VEHICLE_TYPE_AIRPLANE" func="no" />
		<KeyWord name="VEHICLE_TYPE_BALLOON" func="no" />
		<KeyWord name="VEHICLE_TYPE_BOAT" func="no" />
		<KeyWord name="VEHICLE_TYPE_CAR" func="no" />
		<KeyWord name="VEHICLE_TYPE_NONE" func="no" />
		<KeyWord name="VEHICLE_TYPE_SLED" func="no" />
		<KeyWord name="VEHICLE_VERTICAL_ATTRACTION_EFFICIENCY" func="no" />
		<KeyWord name="VEHICLE_VERTICAL_ATTRACTION_TIMESCALE" func="no" />
		<KeyWord name="VERTICAL" func="no" />
		<KeyWord name="WANDER_PAUSE_AT_WAYPOINTS" func="no" />
		<KeyWord name="WATER_BLUR_MULTIPLIER" func="no" />
		<KeyWord name="WATER_FOG" func="no" />
		<KeyWord name="WATER_FRESNEL" func="no" />
		<KeyWord name="WATER_NORMAL_SCALE" func="no" />
		<KeyWord name="WATER_NORMAL_TEXTURE" func="no" />
		<KeyWord name="WATER_REFRACTION" func="no" />
		<KeyWord name="WATER_WAVE_DIRECTION" func="no" />
		<KeyWord name="XP_ERROR_EXPERIENCES_DISABLED" func="no" />
		<KeyWord name="XP_ERROR_EXPERIENCE_DISABLED" func="no" />
		<KeyWord name="XP_ERROR_EXPERIENCE_SUSPENDED" func="no" />
		<KeyWord name="XP_ERROR_INVALID_EXPERIENCE" func="no" />
		<KeyWord name="XP_ERROR_INVALID_PARAMETERS" func="no" />
		<KeyWord name="XP_ERROR_KEY_NOT_FOUND" func="no" />
		<KeyWord name="XP_ERROR_MATURITY_EXCEEDED" func="no" />
		<KeyWord name="XP_ERROR_NONE" func="no" />
		<KeyWord name="XP_ERROR_NOT_FOUND" func="no" />
		<KeyWord name="XP_ERROR_NOT_PERMITTED" func="no" />
		<KeyWord name="XP_ERROR_NOT_PERMITTED_LAND" func="no" />
		<KeyWord name="XP_ERROR_NO_EXPERIENCE" func="no" />
		<KeyWord name="XP_ERROR_QUOTA_EXCEEDED" func="no" />
		<KeyWord name="XP_ERROR_RETRY_UPDATE" func="no" />
		<KeyWord name="XP_ERROR_STORAGE_EXCEPTION" func="no" />
		<KeyWord name="XP_ERROR_STORE_DISABLED" func="no" />
		<KeyWord name="XP_ERROR_THROTTLED" func="no" />
		<KeyWord name="XP_ERROR_UNKNOWN_ERROR" func="no" />
		<KeyWord name="ZERO_ROTATION" func="no" />
		<KeyWord name="ZERO_VECTOR" func="no" />
		<KeyWord name="at_rot_target" func="yes">
			<Overload descr="Result of llRotTarget library function call.">
				<Param name="integer handle" />
				<Param name="rotation targetrot" />
				<Param name="rotation ourrot" />
			</Overload>
		</KeyWord>

		<KeyWord name="at_target" func="yes">
			<Overload descr="Result of llTarget library function call.">
				<Param name="integer tnum" />
				<Param name="vector targetpos" />
				<Param name="vector ourpos" />
			</Overload>
		</KeyWord>

		<KeyWord name="attach" func="yes">
			<Overload descr="Triggered in an object when the object attaches or detaches from agent.">
				<Param name="key id" />
			</Overload>
		</KeyWord>

		<KeyWord name="changed" func="yes">
			<Overload descr="Various changes to the object/prim trigger this event.
Multiple changes can be represented in a single event, so use bit-wise arithmetic.">
				<Param name="integer change" />
			</Overload>
		</KeyWord>

		<KeyWord name="collision" func="yes">
			<Overload descr="Triggered while task is colliding with another task.">
				<Param name="integer num_detected" />
			</Overload>
		</KeyWord>

		<KeyWord name="collision_end" func="yes">
			<Overload descr="Triggered when task stops colliding with another task.">
				<Param name="integer num_detected" />
			</Overload>
		</KeyWord>

		<KeyWord name="collision_start" func="yes">
			<Overload descr="Triggered when task starts colliding with another task.">
				<Param name="integer num_detected" />
			</Overload>
		</KeyWord>

		<KeyWord name="control" func="yes">
			<Overload descr="Result of llTakeControls library function call and user input.">
				<Param name="key id" />
				<Param name="integer level" />
				<Param name="integer edge" />
			</Overload>
		</KeyWord>

		<KeyWord name="dataserver" func="yes">
			<Overload descr="Triggered when task receives asynchronous data.">
				<Param name="key query_id" />
				<Param name="string data" />
			</Overload>
		</KeyWord>

		<KeyWord name="default" />

		<KeyWord name="do" />

		<KeyWord name="else" />

		<KeyWord name="email" func="yes">
			<Overload descr="Triggered as a result of calling llGetNextEmail where there is a matching email
in the email queue.">
				<Param name="string time" />
				<Param name="string address" />
				<Param name="string subject" />
				<Param name="string message" />
				<Param name="integer num_left" />
			</Overload>
		</KeyWord>

		<KeyWord name="experience_permissions" func="yes">
			<Overload descr="The agent with the key agent_id has approved an experience permissions request.
This may be through interaction with the experience permission dialog or the
experience profile, or automatically if the agent with the key agent_id has
previously approved the experience.">
				<Param name="key agent_id" />
			</Overload>
		</KeyWord>

		<KeyWord name="experience_permissions_denied" func="yes">
			<Overload descr="The agent has denied experience permission.

This event may be generated in many cases:

In response to a call to llRequestExperiencePermissions if any of the following is
true:
- The agent does not respond to the experience permission dialog. This will happen
after a long delay if the agent is running a viewer which doesn't understand
the request or if the agent has blocked the object.
- The agent selects &quot;Block Experience&quot; in the experience permission
dialog.
- The agent has previously blocked the experience through another experience
permission dialog or through the experience profile.
- An attachment is asking for permission from an agent other than its owner.
- The experience cannot run on the region because it is blocked or exceeds the
maturity rating of the region.
The experience can no longer run:
- The script has moved to a region where the experience cannot run because it is
blocked or it exceeds the maturity rating of the region.
- The agent has blocked the experience from the experience profile.">
				<Param name="key agent_id" />
				<Param name="integer reason" />
			</Overload>
		</KeyWord>

		<KeyWord name="float" />

		<KeyWord name="for" />

		<KeyWord name="http_request" func="yes">
			<Overload descr="Triggered when task receives an HTTP request.">
				<Param name="key request_id" />
				<Param name="string method" />
				<Param name="string body" />
			</Overload>
		</KeyWord>

		<KeyWord name="http_response" func="yes">
			<Overload descr="Triggered when task receives a response to one of its llHTTPRequests.">
				<Param name="key request_id" />
				<Param name="integer status" />
				<Param name="list metadata" />
				<Param name="string body" />
			</Overload>
		</KeyWord>

		<KeyWord name="if" />
		<KeyWord name="integer" />
		<KeyWord name="jump" />
		<KeyWord name="key" />
		<KeyWord name="land_collision" func="yes">
			<Overload descr="Triggered in the root when physical object or attached avatar is colliding with
land.">
				<Param name="vector pos" />
			</Overload>
		</KeyWord>

		<KeyWord name="land_collision_end" func="yes">
			<Overload descr="Triggered in the root when a physical object or attached avatar stops colliding
with land.">
				<Param name="vector pos" />
			</Overload>
		</KeyWord>

		<KeyWord name="land_collision_start" func="yes">
			<Overload descr="Triggered in the root when a physical object or attached avatar starts colliding
with land.">
				<Param name="vector pos" />
			</Overload>
		</KeyWord>

		<KeyWord name="link_message" func="yes">
			<Overload descr="Triggered when the script receives a link message that was sent by a call to
llMessageLinked. llMessageLinked is used to send messages from one script to
another within the same object.">
				<Param name="integer sender_num" />
				<Param name="integer num" />
				<Param name="string str" />
				<Param name="key id" />
			</Overload>
		</KeyWord>

		<KeyWord name="list" />

		<KeyWord name="linkset_data" func="yes">
			<Overload descr="The linkset_data event fires in all scripts in a linkset whenever the datastore
has been modified through a call to one of the llLinksetData functions.
* integer action: Action taken on the linkset Datastore
* string name: The key of the name:value pair.
* string value: The new value of the pair. Empty string if pair was deleted.

This event fires in all scripts in a linkset whenever the datastore is changed.">
				<Param name="vector action" />
				<Param name="string name" />
				<Param name="string value" />
			</Overload>
		</KeyWord>

		<KeyWord name="listen" func="yes">
			<Overload descr="Triggered by chat, use llListen to enable and filter.">
				<Param name="integer channel" />
				<Param name="string name" />
				<Param name="key id" />
				<Param name="string message" />
			</Overload>
		</KeyWord>

		<KeyWord name="llAbs" func="yes">
			<Overload retVal="integer" descr="Returns an integer that is the positive version of val.

integer val: Any integer value.

This function is similar to functions found in many other languages.">
				<Param name="integer val" />
			</Overload>
		</KeyWord>

		<KeyWord name="llAcos" func="yes">
			<Overload retVal="float" descr="Returns the arccosine in radians of val.

float val: must fall in the range [-1.0, 1.0].

The returned value is in the range [0.0, PI].">
				<Param name="float val" />
			</Overload>
		</KeyWord>

		<KeyWord name="llAddToLandBanList" func="yes">
			<Overload retVal="void" descr="Add avatar to the land ban list for hours, or indefinitely if hours
is zero.">
				<Param name="key avatar" />
				<Param name="float hours" />
			</Overload>
		</KeyWord>

		<KeyWord name="llAddToLandPassList" func="yes">
			<Overload retVal="void" descr="Add avatar to the land pass list for hours, or indefinitely
hours is zero.">
				<Param name="key avatar" />
				<Param name="float hours" />
			</Overload>
		</KeyWord>

		<KeyWord name="llAdjustSoundVolume" func="yes">
			<Overload retVal="void" descr="Adjusts volume of attached sound.

float volume - between 0.0 (silent) and 1.0 (loud) (0.0 &gt;= volume &gt;= 1.0)">
				<Param name="float volume" />
			</Overload>
		</KeyWord>

		<KeyWord name="llAgentInExperience" func="yes">
			<Overload retVal="integer" descr="Determines whether or not the specified agent is in the script's
experience.

Returns an integer boolean that is TRUE if the agent is in the experience and
the experience can run in the current region.">
				<Param name="key agent" />
			</Overload>
		</KeyWord>

		<KeyWord name="llAllowInventoryDrop" func="yes">
			<Overload retVal="void" descr="Allows for all users without modify permissions to add inventory
items to a prim.

boolean add, if TRUE, it allows anyone, even if they don't have modify rights
to a prim, regardless of whether they are the owner or not, to drop items into
that prim. If FALSE, inventory dropping can still be done, but it is restricted
only to people with modify permissions to that prim.

To actually do the dropping, you need to drag an item from your inventory and
drop it onto the prim WHILE holding down your Ctrl key. If you've got
everything right, then just before you release it, you will see the prim framed
in red.

Ownership of the dropped inventory item changes to the owner of the prim. Next
owner permissions kick in on the item that was dropped in. Non-transfer items
cannot be dropped into a prim owned by someone else.

An application might be a public 'suggestion box' that you want to let
people drop notecards into.">
				<Param name="boolean add" />
			</Overload>
		</KeyWord>

		<KeyWord name="llAngleBetween" func="yes">
			<Overload retVal="float" descr="Returns a float that is the angle between rotation a and b.">
				<Param name="rotation a" />
				<Param name="rotation b" />
			</Overload>
		</KeyWord>

		<KeyWord name="llApplyImpulse" func="yes">
			<Overload retVal="void" descr="Applies impulse to object.

boolean local, if TRUE force is treated as a local directional vector, if FALSE
force is treated as a region directional vector.

Instantaneous impulse. llSetForce has continuous push. 'Instantaneous' seems
to mean a one second impulse, as an application of a force (in newtons) equal to
the object's mass (in kg) for one second will accelerate it to a velocity of
1 (in meters per second), which appears to be what happens with this function.">
				<Param name="vector force" />
				<Param name="boolean local" />
			</Overload>
		</KeyWord>

		<KeyWord name="llApplyRotationalImpulse" func="yes">
			<Overload retVal="void" descr="Applies rotational impulse to object.">
				<Param name="vector force" />
				<Param name="boolean local" />
			</Overload>
		</KeyWord>

		<KeyWord name="llAsin" func="yes">
			<Overload retVal="float" descr="Returns a float that is the arcsine in radians of val.

float val must fall in the range -1.0, 1.0].

The returned value is in the range [-PI_BY_TWO, PI_BY_TWO].">
				<Param name="float val" />
			</Overload>
		</KeyWord>

		<KeyWord name="llAtan2" func="yes">
			<Overload retVal="float" descr="Returns a float that is the arctangent2 of y, x.

Similar to the arctangent(y/x) except it utilizes the signs of x &amp; y to
determine the quadrant and avoids division by zero.">
				<Param name="float y" />
				<Param name="float x" />
			</Overload>
		</KeyWord>

		<KeyWord name="llAttachToAvatar" func="yes">
			<Overload retVal="void" descr="Attaches the object to the avatar who has granted permission to the
script.

The object is taken into the users inventory and attached to attach_point.

To run this function the script must request the PERMISSION_ATTACH permission
with llRequestPermissions and it must be granted by the owner. If attach_point
is zero, then the object attaches to the attach point it was most recently
attached to.">
				<Param name="integer attach_point" />
			</Overload>
		</KeyWord>

		<KeyWord name="llAttachToAvatarTemp" func="yes">
			<Overload retVal="void" descr="Follows the same convention as llAttachToAvatar, with the exception
that the object will not create new inventory for the user,	and will disappear
on detach or disconnect.

To run this function the script must request the PERMISSION_ATTACH permission
with llRequestPermissions. It should be noted that when an object is attached
temporarily, a user cannot 'take' or 'drop' the object that is
attached to them.

Note that the user DOES NOT have to be the owner of the object for it to attach
properly. In fact giving the object, or having the user take the object in order
to transfer ownership, negates most of the usefulness of this function.">
				<Param name="integer attach_point" />
			</Overload>
		</KeyWord>

		<KeyWord name="llAvatarOnLinkSitTarget" func="yes">
			<Overload retVal="key" descr="Returns a key that is the UUID of the user seated on the prim.

If the prim lacks a sit_target or there is no avatar sitting on the prim, then
NULL_KEY is returned.">
				<Param name="integer link" />
			</Overload>
		</KeyWord>

		<KeyWord name="llAvatarOnSitTarget" func="yes">
			<Overload retVal="key" descr="Returns a key that is the UUID of the user seated on the prim.

If the prim lacks a sit_target or there is no avatar sitting on the prim, then
NULL_KEY is returned." />
		</KeyWord>

		<KeyWord name="llAxes2Rot" func="yes">
			<Overload retVal="rotation" descr="Returns a rotation that is defined by the 3 coordinate axes.

All three vectors must be mutually orthogonal unit vectors.">
				<Param name="vector fwd" />
				<Param name="vector left" />
				<Param name="vector up" />
			</Overload>
		</KeyWord>

		<KeyWord name="llAxisAngle2Rot" func="yes">
			<Overload retVal="rotation" descr="Returns a rotation that is a generated angle about axis.

axis need not be normalized, only the direction is important.">
				<Param name="vector axis" />
				<Param name="float angle" />
			</Overload>
		</KeyWord>

		<KeyWord name="llBase64ToInteger" func="yes">
			<Overload retVal="integer" descr="Returns an integer that is str Base64 decoded as a big endian
integer.">
				<Param name="string str" />
			</Overload>
		</KeyWord>

		<KeyWord name="llBase64ToString" func="yes">
			<Overload retVal="string" descr="Returns a string that is the Base64 str decoded into a
conventional string.">
				<Param name="string str" />
			</Overload>
		</KeyWord>

		<KeyWord name="llBreakAllLinks" func="yes">
			<Overload retVal="void" descr="Delinks all prims in the link set.

To run this function the script must request the PERMISSION_CHANGE_LINKS permission
with llRequestPermissions and it must be granted by the owner." />
		</KeyWord>

		<KeyWord name="llBreakLink" func="yes">
			<Overload retVal="void" descr="Delinks the prim with the given link
				number in a linked object set.

To run this function the script must request the PERMISSION_CHANGE_LINKS permission
with llRequestPermissions and it must be granted by the owner.">
				<Param name="integer link" />
			</Overload>
		</KeyWord>

		<KeyWord name="llCSV2List" func="yes">
			<Overload retVal="void" descr="This function takes a string of values separated by commas,
and turns it into a list.

Returns a list made by parsing src, a string of comma separated values.

* string src

To convert a list into a comma-separated string use llList2CSV.
Do not confuse this function with the CSV format, it is not the CSV format.">
				<Param name="string src" />
			</Overload>
		</KeyWord>

		<KeyWord name="llCastRay" func="yes">
			<Overload retVal="list" descr="Cast a ray from start to end and report collision data for
intersections with objects.

Returns a list of strided values with an additional integer status_code on the
end. Each stride consists of two mandatory values {key uuid, vector position}
and possibly some optional values {integer link_number, vector normal} see
RC_DATA_FLAGS for details.
The status_code if it is negative is an error code, otherwise it is the number
of hits (and strides) returned.">
				<Param name="vector start" />
				<Param name="vector end" />
				<Param name="list options" />
			</Overload>
		</KeyWord>

		<KeyWord name="llCeil" func="yes">
			<Overload retVal="integer" descr="Returns an integer that is the integer value of val rounded
towards positive infinity (return &gt;= val).">
				<Param name="float val" />
			</Overload>
		</KeyWord>

		<KeyWord name="llChar" func="yes">
			<Overload retVal="string" descr="Construct a single character string from the supplied Unicode
value.

Returns a string

* integer val: Unicode value for character.

This function returns a single character string generated from the character at
the indicated UTF-32 codepoint. Returns '?' (Unicode 0x0F) if val is
negative.">
				<Param name="integer val" />
			</Overload>
		</KeyWord>

		<KeyWord name="llClearCameraParams" func="yes">
			<Overload retVal="void" descr="Resets all camera parameters to default values and turns off
scripted camera control.

To run this function the script must request the PERMISSION_CONTROL_CAMERA
permission with llRequestPermissions." />
		</KeyWord>

		<KeyWord name="llClearLinkMedia" func="yes">
			<Overload retVal="integer" descr="Clears (deletes) the media and all params from the given face on
the linked prim(s).
Returns an integer that is a STATUS_* flag which details the success/failure of
the operation.">
				<Param name="integer link" />
				<Param name="integer face" />
			</Overload>
		</KeyWord>

		<KeyWord name="llClearPrimMedia" func="yes">
			<Overload retVal="integer" descr="Clears (deletes) the media and all params from the given face.

Returns an integer that is a STATUS_* flag which details the success/failure of
the operation.">
				<Param name="integer face" />
			</Overload>
		</KeyWord>

		<KeyWord name="llCloseRemoteDataChannel" func="yes">
			<Overload retVal="void" descr="Closes XML-RPC channel.">
				<Param name="key channel" />
			</Overload>
		</KeyWord>

		<KeyWord name="llCollisionFilter" func="yes">
			<Overload retVal="void" descr="Sets the collision filter, exclusively or inclusively.

If accept == TRUE, only accept collisions with objects name AND id (either is
optional), otherwise with objects not name AND id.">
				<Param name="string name" />
				<Param name="key id" />
				<Param name="boolean accept" />
			</Overload>
		</KeyWord>

		<KeyWord name="llCollisionSound" func="yes">
			<Overload retVal="void" descr="Suppress default collision sounds, replace default impact sounds
with impact_sound at the volume impact_volume.

* string impact_sound: A sound in the prim's inventory, UUID of a sound
or an empty string.
* float impact_volume: Between 0.0 (silent) and 1.0 (loud) (0.0 &gt;=
impact_volume &lt;= 1.0).

If impact_sound is an empty string then the collision sound is suppressed.
If impact_volume is set to zero the collision particles are suppressed.">
				<Param name="string impact_sound" />
				<Param name="float impact_volume" />
			</Overload>
		</KeyWord>

		<KeyWord name="llComputeHash" func="yes">
			<Overload retVal="string" descr="Returns a string hex-encoded hash digest of message using
cryptographic algorithm.

* string message
* string algorithm

Supported values of algorithm are md5, md5_sha1, sha1, sha224, sha256, sha384, sha512.">
				<Param name="string message" />
				<Param name="string algorithm" />
			</Overload>
		</KeyWord>

		<KeyWord name="llCos" func="yes">
			<Overload retVal="float" descr="Returns a float that is the cosine of theta.">
				<Param name="float theta" />
			</Overload>
		</KeyWord>

		<KeyWord name="llCreateCharacter" func="yes">
			<Overload retVal="void" descr="Creates a pathfinding entity, known as a 'character', from
the object containing the script. Required to activate use of pathfinding functions.

By default, the character's shape will be an upright capsule approximately
the size of the linkset, adjustable via the options list. The linkset must use
the land impact accounting system introduced with the mesh project. If called on
an existing character, all unspecified parameters other than character size will
revert to their defaults (if not specified, character size will not change).
This is STRONGLY preferred over calling llDeleteCharacter() followed by
llCreateCharacter() as it is much, much less taxing on the server.">
				<Param name="list options" />
			</Overload>
		</KeyWord>

		<KeyWord name="llCreateKeyValue" func="yes">
			<Overload retVal="key" descr="Start an asynchronous transaction to create a key-value pair
associated with the given experience key using the given key and value.

Returns a handle (a key) that can be used to identify the corresponding
dataserver event to determine if this command succeeded or failed.

If the key already exists the dataserver will return a failure along with the
error XP_ERROR_STORAGE_EXCEPTION.">
				<Param name="string k" />
				<Param name="string v" />
			</Overload>
		</KeyWord>

		<KeyWord name="llCreateLink" func="yes">
			<Overload retVal="void" descr="Attempt to link the script's object with target.

* key target: Prim UUID that is in the same region.
* boolean parent: If FALSE, then target becomes the root. If TRUE, then the
script's object becomes the root.

To run this function the script must request the PERMISSION_CHANGE_LINKS
permission with llRequestPermissions and it must be granted by the owner. target
must be modifiable and have the same owner.

This object must also be modifiable.">
				<Param name="key target" />
				<Param name="boolean parent" />
			</Overload>
		</KeyWord>

		<KeyWord name="llDataSizeKeyValue" func="yes">
			<Overload retVal="key" descr="Start an asynchronous transaction to request the used and total
amount of data allocated for the experience.

Returns a handle (a key) that can be used to identify the corresponding
dataserver event to determine if this command succeeded or failed and the
results." />
		</KeyWord>

		<KeyWord name="llDeleteCharacter" func="yes">
			<Overload retVal="void" descr="Convert the object back to a standard object, removing all
pathfinding properties." />
		</KeyWord>

		<KeyWord name="llDeleteKeyValue" func="yes">
			<Overload retVal="key" descr="Start an asynchronous transaction to delete a key-value pair
associated with the given experience key with the given key.

Returns a handle (a key) that can be used to identify the corresponding
dataserver event to determine if this command succeeded or failed and the
results.">
				<Param name="string k" />
			</Overload>
		</KeyWord>

		<KeyWord name="llDeleteSubList" func="yes">
			<Overload retVal="list" descr="Returns a list that is a copy of src but with the slice from start
to end removed.

start &amp; end support negative indexes. While the function result is different
than src, src is not modified, remember to use or store the result of this
function.
The opposite function would be llListInsertList.">
				<Param name="list source" />
				<Param name="integer start" />
				<Param name="integer end" />
			</Overload>
		</KeyWord>

		<KeyWord name="llDeleteSubString" func="yes">
			<Overload retVal="string" descr="Returns a string that is the result of removing characters from
src from start to end.

start &amp; end support negative indexes. Characters at positions start and end
are removed.">
				<Param name="string source" />
				<Param name="integer start" />
				<Param name="integer end" />
			</Overload>
		</KeyWord>

		<KeyWord name="llDetachFromAvatar" func="yes">
			<Overload retVal="void" descr="Detach object from avatar.

To run this function the script must request the PERMISSION_ATTACH permission
with llRequestPermissions and it must be granted by the owner. The detached
object remains in the user's inventory." />
		</KeyWord>

		<KeyWord name="llDetectedGrab" func="yes">
			<Overload retVal="vector" descr="Returns a vector that is the grab offset of the user touching the
object; only works in the touch event.

index does not support negative indexes. Returns ZERO_VECTOR if index is out of
range or if called from an event other than the touch event.">
				<Param name="integer index" />
			</Overload>
		</KeyWord>

		<KeyWord name="llDetectedGroup" func="yes">
			<Overload retVal="boolean" descr="Returns an integer that is TRUE if the detected object or agent
has the same active group as the prim containing the script. Otherwise FALSE is
returned.

index does not support negative indexes. Returns FALSE if index is out of range.">
				<Param name="boolean index" />
			</Overload>
		</KeyWord>

		<KeyWord name="llDetectedKey" func="yes">
			<Overload retVal="key" descr="Returns a key that is the UUID of the detected object or avatar
index.

index does not support negative indexes. Returns an empty key if index is not
valid sensed object or avatar.">
				<Param name="integer index" />
			</Overload>
		</KeyWord>

		<KeyWord name="llDetectedLinkNumber" func="yes">
			<Overload retVal="integer" descr="index does not support negative indexes. For touch and collision
categories of events only.">
				<Param name="integer index" />
			</Overload>
		</KeyWord>
		<KeyWord name="llDetectedName" func="yes">
			<Overload retVal="string" descr="Returns a string that is the name of the detected item.

item does not support negative indexes. Returns NULL_KEY if item is not valid.
If the item detected is an avatar then the legacy name is returned.">
				<Param name="integer item" />
			</Overload>
		</KeyWord>

		<KeyWord name="llDetectedOwner" func="yes">
			<Overload retVal="key" descr="Returns the key (UUID) of the owner of the object.

index does not support negative indexes. Returns an empty key if index is not
valid sensed object.">
				<Param name="integer index" />
			</Overload>
		</KeyWord>

		<KeyWord name="llDetectedPos" func="yes">
			<Overload retVal="vector" descr="Returns a vector that is the position (in region coordinates) of
detected object number.

index does not support negative indexes. Returns ZERO_VECTOR if index is not
valid sensed object.">
				<Param name="integer index" />
			</Overload>
		</KeyWord>

		<KeyWord name="llDetectedRot" func="yes">
			<Overload retVal="rotation" descr="Returns the rotation of detected object number.

index does not support negative indexes. Returns ZERO_ROTATION
(&lt;0.0, 0.0, 0.0, 1.0&gt;) if index is not valid sensed object.">
				<Param name="integer index" />
			</Overload>
		</KeyWord>

		<KeyWord name="llDetectedTouchBinormal" func="yes">
			<Overload retVal="vector" descr="Returns a vector that is the surface binormal (tangent to the
surface pointing along the U direction of tangent space) where the touch event
was triggered. Along with llDetectedTouchNormal, this information can be used to
find the tangent space at the touch location.

index does not support negative indexes. For the touch category of events only.
The prim that was touched may not be the prim receiving the event, use
llDetectedLinkNumber to check for this; likewise you can use llDetectedTouchFace
to determine which face was touched. To find the third tangent vector, cross
this vector with the normal.">
				<Param name="integer index" />
			</Overload>
		</KeyWord>

		<KeyWord name="llDetectedTouchFace" func="yes">
			<Overload retVal="integer" descr="Returns an integer that is the index of the face the avatar
clicked on.

index does not support negative indexes. For the touch category of events only.
The prim that was touched may not be the prim receiving the event, use
llDetectedLinkNumber to check for this; likewise you can use llDetectedTouchFace
to determine which face was touched.">
				<Param name="integer index" />
			</Overload>
		</KeyWord>

		<KeyWord name="llDetectedTouchNormal" func="yes">
			<Overload retVal="vector" descr="Returns a vector that is the surface normal (perpendicular to the
surface) where the touch event was triggered. Along with
llDetectedTouchBinormal, this information can be used to find the tangent space
at the touch location.

index does not support negative indexes. For the touch category of events only.
The prim that was touched may not be the prim receiving the event, use
llDetectedLinkNumber to check for this; likewise you can use llDetectedTouchFace
to determine which face was touched.To find the third tangent vector, cross this
vector with the binormal.">
				<Param name="integer index" />
			</Overload>
		</KeyWord>

		<KeyWord name="llDetectedTouchPos" func="yes">
			<Overload retVal="vector" descr="Returns the vector position where the object was touched in
region coordinates, unless it is attached to the HUD, in which case it returns
the position in screen space coordinates.

index does not support negative indexes. For the touch category of events only.
The prim that was touched may not be the prim receiving the event, use
llDetectedLinkNumber to check for this; likewise you can use llDetectedTouchFace
to determine which face was touched.">
				<Param name="integer index" />
			</Overload>
		</KeyWord>

		<KeyWord name="llDetectedTouchST" func="yes">
			<Overload retVal="vector" descr="Returns a vector that is the surface coordinates for where the
prim was touched. The x &amp; y vector positions contain the horizontal (s) &amp;
vertical (t) face coordinates respectively (&lt;s, t, 0.0&gt;). Each component is
in the interval [0.0, 1.0] with the origin in the bottom left corner.

TOUCH_INVALID_TEXCOORD (&lt;-1.0, -1.0, 0.0&gt;) is returned when the surface
coordinates cannot be determined. See Caveats for further details.

index does not support negative indexes. For the touch category of events only.
The prim that was touched may not be the prim receiving the event, use
llDetectedLinkNumber to check for this; likewise you can use llDetectedTouchFace
to determine which face was touched.">
				<Param name="integer index" />
			</Overload>
		</KeyWord>

		<KeyWord name="llDetectedTouchUV" func="yes">
			<Overload retVal="vector" descr="Returns a vector that is the texture coordinates for where the
prim was touched. The x &amp; y vector positions contain the horizontal (u) &amp;
vertical (v) texture coordinates respectively (&lt;u, v, 0.0&gt;). Like
llDetectedTouchST, the interval of each component will be [0.0, 1.0] unless the
texture repeats are set to a non-default value. Increasing or decreasing the
texture repeats of the face will change this interval accordingly.
Additionally, unlike with llDetectedTouchST, changing a texture's rotation
will change the results of this function.

TOUCH_INVALID_TEXCOORD (&lt;-1.0, -1.0, 0.0&gt;) is returned when the touch UV
coordinates cannot be determined. See Caveats for further details.

index does not support negative indexes. For the touch category of events only.
The prim that was touched may not be the prim receiving the event, use
llDetectedLinkNumber to check for this; likewise you can use llDetectedTouchFace
to determine which face was touched.">
				<Param name="integer index" />
			</Overload>
		</KeyWord>

		<KeyWord name="llDetectedType" func="yes">
			<Overload retVal="integer" descr="Returns an integer mask that is the types of detected object or
avatar.

index does not support negative indexes. Returns zero if index is not valid
sensed object or avatar.">
				<Param name="integer index" />
			</Overload>
		</KeyWord>

		<KeyWord name="llDetectedVel" func="yes">
			<Overload retVal="vector" descr="Returns the vector velocity of detected object or avatar index.

index does not support negative indexes. Returns ZERO_VECTOR (&lt;0.0, 0.0, 0.0&gt;)
if index is not valid sensed object or avatar.">
				<Param name="integer index" />
			</Overload>
		</KeyWord>

		<KeyWord name="llDialog" func="yes">
			<Overload retVal="void" descr="Shows a dialog box in the lower right corner of the avatar's
screen (upper right in Viewer 1.x) with a message and choice buttons, as well as
an ignore button. This has many uses ranging from simple message delivery to
complex menu systems.

When a button is pressed, the avatar says the text of the button label on
channel. The position where the chat is generated is where the root prim of the
dialog generating object was when the dialog button was pressed.">
				<Param name="key avatar" />
				<Param name="string message" />
				<Param name="list buttons" />
				<Param name="integer channel" />
			</Overload>
		</KeyWord>

		<KeyWord name="llDie" func="yes">
			<Overload retVal="void" descr="Deletes the object. The object does not go to the owners
Inventory:Trash.

If called in any prim in the link set the result will be the deletion of the
entire object.To remove a single prim from an object use llBreakLink first." />
		</KeyWord>

		<KeyWord name="llDumpList2String" func="yes">
			<Overload retVal="string" descr="Returns a string that is the list src converted to a string with
separator between the entries.

Use llParseString2List or llParseStringKeepNulls to undo the process.

Unlike llList2CSV , which dumps a list to a comma-separated formatted string
with no choice over the separator, llDumpList2String gives you more control.
This can be useful if you don't trust commas as a separator because you might be
working with data supplied to the script by a user who uses, say, commas as part
of a street address.">
				<Param name="list source" />
				<Param name="string separator" />
			</Overload>
		</KeyWord>

		<KeyWord name="llEdgeOfWorld" func="yes">
			<Overload retVal="boolean" descr="Checks to see whether the border hit by dir from pos is the edge
of the world (has no neighboring simulator).

Returns an integer that is a boolean, TRUE indicating there is a simulator in
the direction indicated.">
				<Param name="vector pos" />
				<Param name="vector dir" />
			</Overload>
		</KeyWord>

		<KeyWord name="llEjectFromLand" func="yes">
			<Overload retVal="void" descr="Ejects avatar from the parcel.

Generally, the object owner must also be the land owner but there is an
exception
for land deeded to a group for group members with the 'Eject and freeze
Residents on parcels' ability.

If the land under the object is owned by an individual, the script must be owned
by the same individual.

If the land under the object is deeded to a group the object will need to
satisfy one of the following:
- The object is deeded to the same group.
- The object owner must have 'Eject and freeze Residents on parcels'
ability in the group and be connected to the sim.">
				<Param name="key avatar" />
			</Overload>
		</KeyWord>

		<KeyWord name="llEmail" func="yes">
			<Overload retVal="void" descr="Sends an email to address with subject and message.

The entire message (including the address, subject and other miscellaneous
fields) can't be longer than 4096 bytes combined.

The message is prefixed with information about the prim sending the email.">
				<Param name="string address" />
				<Param name="string subject" />
				<Param name="string message" />
			</Overload>
		</KeyWord>

		<KeyWord name="llEscapeURL" func="yes">
			<Overload retVal="string" descr="Returns a string that is the escaped/encoded version of url,
replacing spaces with %20 etc.

The function will escape any character not in [a-zA-Z0-9] to %xx where xx is the
hexadecimal value of the character in UTF-8 byte form.

To clarify, numbers and ASCII7 alphabetical characters are NOT escaped. If a
character requires more then one byte in UTF-8 byte form then it returns
multiple %xx sequences chained together.

This function is similar to functions found in many other languages.">
				<Param name="string url" />
			</Overload>
		</KeyWord>

		<KeyWord name="llEuler2Rot" func="yes">
			<Overload retVal="rotation" descr="Returns a rotation representation of Euler Angles v.

The Euler angle vector (in radians) is converted to a rotation by doing the
rotations around the 3 axes in Z, Y, X order. So llEuler2Rot(&lt;1.0, 2.0, 3.0&gt;
* DEG_TO_RAD) generates a rotation by taking a vector pointing along the X axis,
first rotating it 3 degrees around the global Z axis, then rotating the resulting
vector 2 degrees around the global Y axis, and finally rotating that 1 degree
around the global X axis.">
				<Param name="vector v" />
			</Overload>
		</KeyWord>

		<KeyWord name="llEvade" func="yes">
			<Overload retVal="void" descr="Characters will (roughly) try to hide from their pursuers if there
is a good hiding spot along their fleeing path. Hiding means no direct line of
sight from the head of the character (center of the top of its physics bounding
box) to the head of its pursuer and no direct path between the two on the
navmesh.">
				<Param name="key target" />
				<Param name="list options" />
			</Overload>
		</KeyWord>

		<KeyWord name="llExecCharacterCmd" func="yes">
			<Overload retVal="void" descr="Send a command to the pathing system.

Currently only supports stopping the current pathfinding operation or causing the
character to jump.">
				<Param name="integer command" />
				<Param name="list options" />
			</Overload>
		</KeyWord>

		<KeyWord name="llFabs" func="yes">
			<Overload retVal="float" descr="Returns a float that is the positive version of val.

This function is similar to functions found in many other languages.">
				<Param name="float val" />
			</Overload>
		</KeyWord>

		<KeyWord name="llFleeFrom" func="yes">
			<Overload retVal="void" descr="Directs a character to keep a specific distance from a specific
position in the region or adjacent regions.">
				<Param name="vector position" />
				<Param name="float distance" />
				<Param name="list options" />
			</Overload>
		</KeyWord>

		<KeyWord name="llFloor" func="yes">
			<Overload retVal="integer" descr="Returns an integer that is the integer value of val rounded
towards negative infinity (return &lt;= val).">
				<Param name="float val" />
			</Overload>
		</KeyWord>

		<KeyWord name="llForceMouselook" func="yes">
			<Overload retVal="void" descr="Sets if a sitting avatar should be forced into mouselook when they
sit on this prim.

boolean mouselook, if TRUE when an avatar sits on the prim, the avatar will be
forced into mouselook mode. FALSE is the default setting and will undo a
previously set TRUE or do nothing.

A sit target is not necessary for this function to work.">
				<Param name="boolean mouselook" />
			</Overload>
		</KeyWord>

		<KeyWord name="llFrand" func="yes">
			<Overload retVal="float" descr="Returns a float that is pseudo random number in the range [0.0,
mag) or (mag, 0.0].

The sign of mag matches the return.

When converting the float to an integer, be sure to use an integer typecast
(integer) and not one of the rounding functions (llRound, llFloor, llCeil).
The integer typecast is the only method guarantied not to skew the distribution
of integer values.">
				<Param name="float val" />
			</Overload>
		</KeyWord>

		<KeyWord name="llGenerateKey" func="yes">
			<Overload retVal="key" descr="Generates a key using Version 5 (SHA-1 hash) UUID generation to
create a unique key.

Returns the key generated." />
		</KeyWord>

		<KeyWord name="llGetAccel" func="yes">
			<Overload retVal="vector" descr="Returns a vector that is the acceleration of the object in the
region frame of reference.

Returns ZERO_VECTOR in attachments regardless of the avatar's acceleration." />
		</KeyWord>

		<KeyWord name="llGetAgentInfo" func="yes">
			<Overload retVal="integer" descr="Returns an integer bitfield containing the agent information
about id.">
				<Param name="key id" />
			</Overload>
		</KeyWord>

		<KeyWord name="llGetAgentLanguage" func="yes">
			<Overload retVal="string" descr="Returns a string that is the language code of the preferred
interface language of the user avatar.">
				<Param name="key avatar" />
			</Overload>
		</KeyWord>

		<KeyWord name="llGetAgentList" func="yes">
			<Overload retVal="list" descr="Requests a list of agents currently in the region, limited by the
scope parameter.

Returns a list [key id0, key id1..., key idn] or [string error_msg] - returns
avatar keys for all agents in the region limited to the area(s) specified by
scope.

Scope can be AGENT_LIST_PARCEL, AGENT_LIST_PARCEL_OWNER or AGENT_LIST_REGION.">
				<Param name="integer scope" />
				<Param name="list options" />
			</Overload>
		</KeyWord>

		<KeyWord name="llGetAgentSize" func="yes">
			<Overload retVal="vector" descr="Returns a vector that is an estimated size of the requested
avatar.

ZERO_VECTOR is returned if avatar is not in the region or if it is not an
avatar.
This function is a fast way to check whether a given avatar is within the same
sim or not.">
				<Param name="key avatar" />
			</Overload>
		</KeyWord>

		<KeyWord name="llGetAlpha" func="yes">
			<Overload retVal="float" descr="Returns a float that is the alpha of face.

If face is ALL_SIDES then the function returns the sum of alpha of all the faces
on the prim, range [0, sides]. Otherwise the return is in the range [0, 1].

If face indicates a face that does not exist the return is 0.0 ">
				<Param name="integer face" />
			</Overload>
		</KeyWord>

		<KeyWord name="llGetAndResetTime" func="yes">
			<Overload retVal="float" descr="Returns a float that is script time in seconds and then resets the
script time to zero." />
		</KeyWord>

		<KeyWord name="llGetAnimation" func="yes">
			<Overload retVal="string" descr="Returns a string that is the name of the currently playing
locomotion animation for avatar id.

llGetAgentInfo provides information on some animation states not covered by this
function (typing, away, busy). llGetAnimationList provides more detailed
information about the running animations, but may not reflect avatar state as
accurately as llGetAnimation.">
				<Param name="key id" />
			</Overload>
		</KeyWord>

		<KeyWord name="llGetAnimationList" func="yes">
			<Overload retVal="list" descr="Returns a list of keys of playing animations for avatar.">
				<Param name="key avatar" />
			</Overload>
		</KeyWord>

		<KeyWord name="llGetAnimationOverride" func="yes">
			<Overload retVal="string" descr="Returns a string that is the name of the animation that is being
used for the specified animation state (anim_state).

* string anim_state: Animation state

To run this function the script must request the PERMISSION_OVERRIDE_ANIMATIONS
or PERMISSION_TRIGGER_ANIMATION permission with llRequestPermissions.">
				<Param name="string anim_state" />
			</Overload>
		</KeyWord>

		<KeyWord name="llGetAttached" func="yes">
			<Overload retVal="integer" descr="Returns the attach_point (an integer) the object is attached to
or zero if it is not attached." />
		</KeyWord>

		<KeyWord name="llGetAttachedList" func="yes">
			<Overload retVal="void" descr="Returns a list of object keys corresponding to public attachments
worn by an avatar.

* key avatar: avatar UUID that is in the same region

By design HUD attachment keys are not reported by this function.

If avatar is a child agent, [NOT ON REGION] is returned.
If avatar is not a main agent and not a child agent or not an agent at all,
[NOT FOUND] is returned.">
				<Param name="key avatar" />
			</Overload>
		</KeyWord>

		<KeyWord name="llGetBoundingBox" func="yes">
			<Overload retVal="list" descr="Returns a list that is the bounding box of object relative to its
root prim, in local coordinates.

Format: [ (vector) min_corner, (vector) max_corner ]

The bounding box is for the entire link set, not just the requested prim.
Returns an empty list ([]) if object is not found. Works with avatars, too.">
				<Param name="key object" />
			</Overload>
		</KeyWord>

		<KeyWord name="llGetCameraAspect" func="yes">
			<Overload retVal="float" descr="Returns a float value for the current camera's aspect ratio
(e.g. width/height) of the agent for which the task has permissions.

To run this function the script must request the PERMISSION_TRACK_CAMERA
permission with llRequestPermissions." />
		</KeyWord>

		<KeyWord name="llGetCameraFOV" func="yes">
			<Overload retVal="float" descr="Returns a float value for the current camera's field of view
(FOV), in radians, of the agent for which the task has permissions.

To run this function the script must request the PERMISSION_TRACK_CAMERA
permission with llRequestPermissions." />
		</KeyWord>

		<KeyWord name="llGetCameraPos" func="yes">
			<Overload retVal="vector" descr="Returns a vector that is the current camera position for the
agent the task has permissions for.

To run this function the script must request the PERMISSION_TRACK_CAMERA permission
with llRequestPermissions." />
		</KeyWord>

		<KeyWord name="llGetCameraRot" func="yes">
			<Overload retVal="rotation" descr="Returns a rotation that is the current camera orientation for
the agent the task has permissions for.

To run this function the script must request the PERMISSION_TRACK_CAMERA
permission with llRequestPermissions." />
		</KeyWord>

		<KeyWord name="llGetCenterOfMass" func="yes">
			<Overload retVal="vector" descr="Returns the vector position of the object's center of mass in
region coordinates.

If called from a child prim, the child's center of mass is returned instead
(but still in region coordinates)." />
		</KeyWord>

		<KeyWord name="llGetClosestNavPoint" func="yes">
			<Overload retVal="list" descr="Used to get a point on the navmesh that is the closest point to
point.

Returns a list containing a single vector which is the closest point on the
navmesh to the point provided or an empty list.

If an option is not explicitly set, the default value for that option is used.">
				<Param name="vector point" />
				<Param name="list options" />
			</Overload>
		</KeyWord>

		<KeyWord name="llGetColor" func="yes">
			<Overload retVal="vector" descr="Returns a vector that is the color on face.

If face is ALL_SIDES then the function returns the average color of all the faces
on the prim. If face indicates a face that does not exist the return is ZERO_VECTOR
(&lt;0.0, 0.0, 0.0&gt;)." />
		</KeyWord>

		<KeyWord name="llGetCreator" func="yes">
			<Overload retVal="key" descr="Returns a key for the creator of the prim." />
		</KeyWord>

		<KeyWord name="llGetDate" func="yes">
			<Overload retVal="string" descr="Returns a string that is the current date in the UTC time zone in
the format 'YYYY-MM-DD'.

If you wish to know the time as well use: llGetTimestamp which uses the format
'YYYY-MM-DDThh:mm:ss.ff..fZ'." />
		</KeyWord>

		<KeyWord name="llGetDisplayName" func="yes">
			<Overload retVal="string" descr="Returns a string that is the non-unique display name of the
avatar specified by id.

id must specify a valid avatar key, present in or otherwise known to the sim in
which the script is running, otherwise an empty string is returned. This
function will still return a valid display name if the avatar is a child agent
of the sim (i.e., in an adjacent sim, but presently able to see into the one the
script is in), or for a short period after the avatar leaves the sim
(specifically, when the client completely disconnects from the sim, either as a
main or child agent).">
				<Param name="key id" />
			</Overload>
		</KeyWord>

		<KeyWord name="llGetEnergy" func="yes">
			<Overload retVal="float" descr="Returns a float that is how much energy is in the object as a
percentage of maximum." />
		</KeyWord>

		<KeyWord name="llGetEnv" func="yes">
			<Overload retVal="string" descr="Returns a string with the requested data about the region.

Note that the value returned is a string, you may need to cast it to an integer
for use in calculations.">
				<Param name="string name" />
			</Overload>
		</KeyWord>

		<KeyWord name="llGetEnvironment" func="yes">
			<Overload retVal="list" descr="Returns a list containing the current environment values for the
parcel or region as a list of attributes.

Takes a list of attributes to retrieve in params and returns them in the order
requested.

If an unknown rule is encountered in the parameter list an error is sent to the
debug channel.">
				<Param name="vector pos" />
				<Param name="list params" />
			</Overload>
		</KeyWord>

		<KeyWord name="llGetExperienceDetails" func="yes">
			<Overload retVal="list" descr="Returns a list of details about the experience. This list has 5
components: [string experience_name, key owner_id, key experience_id, integer
state, string state_message, key group_id].

If experience_id is NULL_KEY, then information about the script's experience
is returned. In this situation, if the script isn't associated with an
experience, an empty list is returned.">
				<Param name="key experience_id" />
			</Overload>
		</KeyWord>

		<KeyWord name="llGetExperienceErrorMessage" func="yes">
			<Overload retVal="string" descr="Returns a text description of a particular Experience LSL error
constant.

Returns a string describing the error code passed or the string corresponding to
error.
Returns XP_ERROR_UNKNOWN_ERROR if the error is not a valid error code.">
				<Param name="integer error" />
			</Overload>
		</KeyWord>

		<KeyWord name="llGetForce" func="yes">
			<Overload retVal="vector" descr="Returns a vector that is the force (if the script is physical)" />
		</KeyWord>

		<KeyWord name="llGetFreeMemory" func="yes">
			<Overload retVal="integer" descr="Returns the integer of the number of free bytes of memory the
script can use." />
		</KeyWord>

		<KeyWord name="llGetFreeURLs" func="yes">
			<Overload retVal="integer" descr="Returns an integer that is the number of available URLs." />
		</KeyWord>

		<KeyWord name="llGetGMTclock" func="yes">
			<Overload retVal="float" descr="Returns a float that is the time in seconds since midnight GMT.
Value appears to be truncated to the second.

For SL time, which is the same as California time, use llGetWallclock." />
		</KeyWord>

		<KeyWord name="llGetGeometricCenter" func="yes">
			<Overload retVal="vector" descr="Returns the vector that is the geometric center of the object
relative to the root prim." />
		</KeyWord>

		<KeyWord name="llGetHTTPHeader" func="yes">
			<Overload retVal="string" descr="Returns a string that is the value for header for request_id.

Returns an empty string if the header is not found or if the headers can no
longer be accessed. Headers can only be accessed before llHTTPResponse is called
and with-in the first 30 seconds after the http_request event is queued.">
				<Param name="key request_id" />
				<Param name="string header" />
			</Overload>
		</KeyWord>

		<KeyWord name="llGetInventoryCreator" func="yes">
			<Overload retVal="key" descr="Returns a key of the creator of the inventory item.">
				<Param name="string item" />
			</Overload>
		</KeyWord>

		<KeyWord name="llGetInventoryDesc" func="yes">
			<Overload retVal="string" descr="Returns a string with the description of the inventory item.">
				<Param name="string item" />
			</Overload>
		</KeyWord>

		<KeyWord name="llGetInventoryKey" func="yes">
			<Overload retVal="key" descr="Returns a key that is the UUID of the inventory item.

If item is not copy, mod, trans then the return is NULL_KEY. Use
llGetInventoryType instead of this function to verify the existence of
inventory.">
				<Param name="string item" />
			</Overload>
		</KeyWord>

		<KeyWord name="llGetInventoryName" func="yes">
			<Overload retVal="string" descr="Returns a string that is the name of the inventory item number of
type. Returns an empty string if no item of the specified type is found in the
prim's inventory (or there are less than or equal to number items of the type).

number does not support negative indexes. Inventory items are sorted in
alphabetical order (not chronological order).">
				<Param name="integer type" />
				<Param name="integer number" />
			</Overload>
		</KeyWord>

		<KeyWord name="llGetInventoryNumber" func="yes">
			<Overload retVal="integer" descr="Returns an integer that is the number of items of a given type
in the prims inventory.">
				<Param name="integer type" />
			</Overload>
		</KeyWord>

		<KeyWord name="llGetInventoryPermMask" func="yes">
			<Overload retVal="integer" descr="Returns an integer bitfield that is the requested permission
mask for the inventory item">
				<Param name="string item" />
				<Param name="integer mask" />
			</Overload>
		</KeyWord>

		<KeyWord name="llGetInventoryType" func="yes">
			<Overload retVal="integer" descr="Returns an integer that is the type of the inventory item name.

If name does not exist, INVENTORY_NONE is returned (no errors or messages are
generated), making this function ideal for testing the existence of inventory.">
				<Param name="string name" />
			</Overload>
		</KeyWord>

		<KeyWord name="llGetKey" func="yes">
			<Overload retVal="key" descr="Returns the key of the prim the script is attached to." />
		</KeyWord>

		<KeyWord name="llGetLandOwnerAt" func="yes">
			<Overload retVal="key" descr="Returns a key that is the land owner at pos.">
				<Param name="vector pos" />
			</Overload>
		</KeyWord>

		<KeyWord name="llGetLinkKey" func="yes">
			<Overload retVal="key" descr="Returns the key of the linked prim link">
				<Param name="integer link" />
			</Overload>
		</KeyWord>

		<KeyWord name="llGetLinkMedia" func="yes">
			<Overload retVal="list" descr="Get the media params for a particular face on a linked prim, given
the desired list of named params.

Returns a list of values in the order requested.

Returns an empty list if no media exists on the face(s).">
				<Param name="integer link" />
				<Param name="integer face" />
				<Param name="list params" />
			</Overload>
		</KeyWord>

		<KeyWord name="llGetLinkName" func="yes">
			<Overload retVal="string" descr="Returns a string that is the name of link in link set.">
				<Param name="integer link" />
			</Overload>
		</KeyWord>

		<KeyWord name="llGetLinkNumber" func="yes">
			<Overload retVal="integer" descr="Returns an integer that is the link number of the prim
containing the script.

0 means the prim is not linked, 1 the prim is the root,
2 the prim is the first child, etc." />
		</KeyWord>

		<KeyWord name="llGetLinkNumberOfSides" func="yes">
			<Overload retVal="integer" descr="Returns an integer that is the number of faces (or sides) of the
prim link.

See Face for more information about faces and the conditions that control the
number of faces a prim will have.">
				<Param name="integer link" />
			</Overload>
		</KeyWord>

		<KeyWord name="llGetLinkPrimitiveParams" func="yes">
			<Overload retVal="list" descr="Identical to llGetPrimitiveParams except that it acts on the prim
specified by the link number given.

Returns the list of primitive attributes requested in the params list for link.

Supplying a prim or object flag will return that flags attributes. Face flags
require the user to also supply a side parameter.">
				<Param name="integer link" />
				<Param name="list params" />
			</Overload>
		</KeyWord>

		<KeyWord name="llGetLinkSitFlags" func="yes">
			<Overload retVal="integer" descr="Returns the current flags on the link's sit target.

* integer link: Link number (0: unlinked, 1: root prim, &gt;1: child prims and
seated avatars) or a LINK_* flag The link ID">
				<Param name="integer link" />
			</Overload>
		</KeyWord>

		<KeyWord name="llGetListEntryType" func="yes">
			<Overload retVal="integer" descr="Identical to llGetPrimitiveParams except that it acts on the
prim specified by the link number given.

Returns the list of primitive attributes requested in the params list for link.

Supplying a prim or object flag will return that flags attributes. Face flags
require the user to also supply a side parameter.

index supports negative indexes.

If index describes a location not in src then TYPE_INVALID is returned.">
				<Param name="list src" />
				<Param name="integer index" />
			</Overload>
		</KeyWord>

		<KeyWord name="llGetListLength" func="yes">
			<Overload retVal="integer" descr="Returns an integer that is the number of elements in the list src.">
				<Param name="list src" />
			</Overload>
		</KeyWord>

		<KeyWord name="llGetLocalPos" func="yes">
			<Overload retVal="vector" descr="Returns a vector that is the position relative (local) to the
root.

If called from the root prim it returns the position in the region unless it is
attached to which it returns the position relative to the attach point." />
		</KeyWord>

		<KeyWord name="llGetLocalRot" func="yes">
			<Overload retVal="rotation" descr="Returns the rotation of the prim relative to the root.

If called from the root prim, it returns the objects rotation." />
		</KeyWord>

		<KeyWord name="llGetMass" func="yes">
			<Overload retVal="float" descr="Returns a float that is the mass of object (in Lindograms) that
script is attached to." />
		</KeyWord>

		<KeyWord name="llGetMassMKS" func="yes">
			<Overload retVal="float" descr="Returns a float that is the mass (in Kilograms) of object that
script is attached to.

Functionally identical to llGetMass except for the unit used in the return value." />
		</KeyWord>

		<KeyWord name="llGetMaxScaleFactor" func="yes">
			<Overload retVal="float" descr="Returns a float that is the largest scaling factor that can be
used with llScaleByFactor to resize the object. This maximum is determined by
the Linkability_Rules and prim scale limits." />
		</KeyWord>

		<KeyWord name="llGetMemoryLimit" func="yes">
			<Overload retVal="integer" descr="Get the maximum memory a script can use.

Returns the integer amount of memory the script can use in bytes." />
		</KeyWord>

		<KeyWord name="llGetMinScaleFactor" func="yes">
			<Overload retVal="float" descr="Returns a float that is the smallest scaling factor that can be
used with llScaleByFactor to resize the object. This minimum is determined by the prim
scale limits." />
		</KeyWord>

		<KeyWord name="llGetNextEmail" func="yes">
			<Overload retVal="void" descr="Get the next queued email that comes from address, with specified
subject.

If address or subject are an empty string, then that parameter will be treated
as a wildcard.">
				<Param name="string address" />
				<Param name="string subject" />
			</Overload>
		</KeyWord>

		<KeyWord name="llGetNotecardLine" func="yes">
			<Overload retVal="key" descr="Requests the line line of the notecard name from the dataserver.
Returns a key that is the handle for a dataserver event response.

line does not support negative indexes. If line is past the end of the notecard,
EOF is returned by the dataserver.">
				<Param name="string name" />
				<Param name="integer line" />
			</Overload>
		</KeyWord>

		<KeyWord name="llGetNotecardLineSync" func="yes">
			<Overload retVal="string" descr="Requests the line line of the notecard name from the dataserver.

Returns the string containing the text of the requested line from the notecard.

* string name: A notecard in the inventory of the prim this script is in or a
UUID of a notecard.
* integer line: Line number in a notecard (the index starts at zero).

line does not support negative indexes. If line is past the end of the notecard
EOF is returned by the dataserver.">
				<Param name="string name" />
				<Param name="integer line" />
			</Overload>
		</KeyWord>

		<KeyWord name="llGetNumberOfNotecardLines" func="yes">
			<Overload retVal="key" descr="Requests the number of lines in notecard name via the dataserver
event (cast dataserver value to integer)

Returns a key that is the handle for a dataserver event response.">
				<Param name="string name" />
			</Overload>
		</KeyWord>

		<KeyWord name="llGetNumberOfPrims" func="yes">
			<Overload retVal="integer" descr="Returns an integer that is the number of prims in a link set the
script is attached to." />
		</KeyWord>

		<KeyWord name="llGetNumberOfSides" func="yes">
			<Overload retVal="integer" descr="Returns an integer that is the number of faces (or sides) of the
prim.

See Face for more information about faces and the conditions that control the
number of faces a prim will have." />
		</KeyWord>

		<KeyWord name="llGetObjectDesc" func="yes">
			<Overload retVal="string" descr="Returns a string containing the description of the prim the
script is attached to.

To get the object's description (not the current prim's), use PRIM_DESC
or OBJECT_DESC." />
		</KeyWord>

		<KeyWord name="llGetObjectDetails" func="yes">
			<Overload retVal="list" descr="Returns a list of the details for id, specifically those requested
in params.

An empty list if id is not found. OBJECT_UNKNOWN_DETAIL is returned when passed
an invalid integer parameter.">
				<Param name="key id" />
				<Param name="list params" />
			</Overload>
		</KeyWord>

		<KeyWord name="llGetObjectMass" func="yes">
			<Overload retVal="float" descr="Returns a float that is the mass of id.">
				<Param name="key id" />
			</Overload>
		</KeyWord>

		<KeyWord name="llGetObjectName" func="yes">
			<Overload retVal="string" descr="Returns a string that is the name of the prim the script is
attached to." />
		</KeyWord>

		<KeyWord name="llGetObjectPermMask" func="yes">
			<Overload retVal="integer" descr="Returns an integer that is the requested permission mask for the
root object the task is attached to.">
				<Param name="integer mask" />
			</Overload>
		</KeyWord>

		<KeyWord name="llGetObjectPrimCount" func="yes">
			<Overload retVal="integer" descr="Returns an integer that is the total number of prims in the
object that contains prim.

Avatars sitting on the object are not counted. Zero is returned if prim (1) is
not found, (2) is part of an attachment, or (3) is not a prim.">
				<Param name="key prim" />
			</Overload>
		</KeyWord>

		<KeyWord name="llGetOmega" func="yes">
			<Overload retVal="vector" descr="Returns a vector that is the rotation velocity of the object in
radians per second." />
		</KeyWord>

		<KeyWord name="llGetOwner" func="yes">
			<Overload retVal="key" descr="Returns a key that is the object owner's UUID." />
		</KeyWord>

		<KeyWord name="llGetOwnerKey" func="yes">
			<Overload retVal="key" descr="Returns a key that is the owner of prim id.">
				<Param name="key id" />
			</Overload>
		</KeyWord>

		<KeyWord name="llGetParcelDetails" func="yes">
			<Overload retVal="list" descr="Returns a list that is the parcel details specified in params (in
the same order) for the parcel at pos.

Both x and y components of pos are clamped to the range [0.0, 256.0], the z
component is ignored.">
				<Param name="vector pos" />
				<Param name="list params" />
			</Overload>
		</KeyWord>

		<KeyWord name="llGetParcelFlags" func="yes">
			<Overload retVal="integer" descr="Returns an integer that is a mask of parcel flags
(PARCEL_FLAG_*) for the parcel that includes the point pos.

The z component of pos is ignored.">
				<Param name="vector pos" />
			</Overload>
		</KeyWord>

		<KeyWord name="llGetParcelMaxPrims" func="yes">
			<Overload retVal="integer" descr="Returns an integer that is the maximum number of prims allowed
on the parcel at pos.

If sim_wide is TRUE, the return value includes all parcels owned by this parcel
owner, if sim_wide is FALSE the return value determines the max for the
specified parcel only.">
				<Param name="vector pos" />
				<Param name="boolean sim_wide" />
			</Overload>
		</KeyWord>

		<KeyWord name="llGetParcelMusicURL" func="yes">
			<Overload retVal="string" descr="Returns a string containing the parcel streaming audio URL.

The object owner must also be the land owner. If the land is deeded to a group
the object will need to be deeded to the same group for this function to work." />
		</KeyWord>

		<KeyWord name="llGetParcelPrimCount" func="yes">
			<Overload retVal="integer" descr="Returns an integer that is the number of prims on the parcel at
pos of the given category.">
				<Param name="vector pos" />
				<Param name="integer category" />
				<Param name="boolean sim_wide" />
			</Overload>
		</KeyWord>

		<KeyWord name="llGetParcelPrimOwners" func="yes">
			<Overload retVal="list" descr="Returns a list of all residents who own objects on the parcel at
pos and with individual prim counts.

The list is formatted as [key agentKey1, integer agentCount1, key agentKey2,
integer agentCount2...], and sorted by agent key with a maximum of 100 strides.

Requires owner-like permissions for the parcel.">
				<Param name="vector pos" />
			</Overload>
		</KeyWord>

		<KeyWord name="llGetPermissions" func="yes">
			<Overload retVal="integer" descr="Returns an integer bitfield with the script permissions granted." />
		</KeyWord>

		<KeyWord name="llGetPermissionsKey" func="yes">
			<Overload retVal="key" descr="Returns the key of the avatar that last granted or declined
permissions to the script.

Returns NULL_KEY if permissions were never granted or declined." />
		</KeyWord>

		<KeyWord name="llGetPhysicsMaterial" func="yes">
			<Overload retVal="list" descr="Used to get the physical characteristics of an object.

Returns a list in the form:
[float gravity_multiplier, float restitution, float friction, float density]

* float gravity_multiplier: range [-1.0, +28.0], default: 1.0
* float restitution: range [0.0, 1.0], default: [0.3, 0.9]
* float friction: range [0.0, 255.0], default: [0.2, 0.9]
* float density: range [1.0, 22587.0] kg/m^3, default: 1000.0

The default values for friction and restitution depend upon the material type." />
		</KeyWord>

		<KeyWord name="llGetPos" func="yes">
			<Overload retVal="vector" descr="Returns the vector position of the task in region coordinates." />
		</KeyWord>

		<KeyWord name="llGetPrimMediaParams" func="yes">
			<Overload retVal="list" descr="Get the media params for a particular face on an object, given the
desired list of names.

Returns a list of values in the order requested.

Returns an empty list if no media exists on the face.">
				<Param name="integer face" />
				<Param name="list params" />
			</Overload>
		</KeyWord>

		<KeyWord name="llGetPrimitiveParams" func="yes">
			<Overload retVal="list" descr="Returns a list that is the primitive parameters specified in the
params list.

Supplying a prim or object flag will return that flags attributes. Face flags
require the user to also supply a side parameter.">
				<Param name="list params" />
			</Overload>
		</KeyWord>

		<KeyWord name="llGetRegionAgentCount" func="yes">
			<Overload retVal="integer" descr="Returns an integer that is the number of avatars in the region." />
		</KeyWord>

		<KeyWord name="llGetRegionCorner" func="yes">
			<Overload retVal="vector" descr="Returns a vector in meters that is the global location of the
south-west corner of the region the object is in. The z component is 0.0.

Divide the returned value by 256 to get the region offset." />
		</KeyWord>

		<KeyWord name="llGetRegionFPS" func="yes">
			<Overload retVal="float" descr="Returns a float that is the mean region frames per second." />
		</KeyWord>

		<KeyWord name="llGetRegionFlags" func="yes">
			<Overload retVal="integer" descr="Returns an integer that is the region flags (REGION_FLAG_*) for
the region the object is in.

Only a small number of flags are actually used; the rest (shown below in
strike-through) are always zero. In particular, it is not possible to detect the
status of 'Allow Land Resell', 'Allow Land Join/Divide', or
'Block Land Show in Search'; nor, obviously, it is possible for a script
to detect that 'Disable Scripts' has been set." />
		</KeyWord>

		<KeyWord name="llGetRegionName" func="yes">
			<Overload retVal="string" descr="Returns a string that is the current region name." />
		</KeyWord>

		<KeyWord name="llGetRegionTimeDilation" func="yes">
			<Overload retVal="float" descr="Returns a float that is the current time dilation, the value
range is [0.0, 1.0], 0.0 (full dilation) and 1.0 (no dilation).

It is used as the ratio between the change of script time to that of real world
time." />
		</KeyWord>

		<KeyWord name="llGetRenderMaterial" func="yes">
			<Overload retVal="string" descr="Returns a string that is the Material on face.
* integer face: face number or ALL_SIDES

If face is ALL_SIDES then the function returns the value for face zero. If the
Material is in the prim's inventory, the return value is the inventory name,
otherwise the returned value is the Material UUID.">
				<Param name="integer face" />
			</Overload>
		</KeyWord>

		<KeyWord name="llGetRootPosition" func="yes">
			<Overload retVal="vector" descr="Returns a vector that is the region position of the root object
of the object script is attached to." />
		</KeyWord>

		<KeyWord name="llGetRootRotation" func="yes">
			<Overload retVal="rotation" descr="Returns a rotation that is the region rotation of the root prim
of the object." />
		</KeyWord>

		<KeyWord name="llGetRot" func="yes">
			<Overload retVal="rotation" descr="Returns a rotation that is the prim's rotation relative to
the region's axes." />
		</KeyWord>

		<KeyWord name="llGetSPMaxMemory" func="yes">
			<Overload retVal="integer" descr="Returns the integer of the most bytes used while
LlScriptProfiler was last active." />
		</KeyWord>

		<KeyWord name="llGetScale" func="yes">
			<Overload retVal="vector" descr="Returns a vector that is the scale of the prim." />
		</KeyWord>

		<KeyWord name="llGetScriptName" func="yes">
			<Overload retVal="string" descr="Returns a string that is the name of the script that called this
function." />
		</KeyWord>

		<KeyWord name="llGetScriptState" func="yes">
			<Overload retVal="integer" descr="Returns an integer boolean that is TRUE if the script is running." />
		</KeyWord>

		<KeyWord name="llGetSimStats" func="yes">
			<Overload retVal="float" descr="Returns a float that is the requested statistic.">
				<Param name="integer stat_type" />
			</Overload>
		</KeyWord>

		<KeyWord name="llGetSimulatorHostname" func="yes">
			<Overload retVal="string" descr="Returns a string that is the hostname of the machine the script
is running on (same as string in viewer Help dialog)." />
		</KeyWord>

		<KeyWord name="llGetStartParameter" func="yes">
			<Overload retVal="integer" descr="Returns an integer that is the script start/rez parameter.

- If the script was loaded with llRemoteLoadScriptPin then that start parameter
is returned.
- If the containing object was rezzed by llRezObject or llRezAtRoot then the
return is the on_rez parameter.
- If the containing object was manually rezzed, by dragging from inventory, the
start parameter is 0." />
		</KeyWord>

		<KeyWord name="llGetStaticPath" func="yes">
			<Overload retVal="list" descr="Returns a list of position vectors indicating pathfinding waypoints
between positions at start and end, for a character of a given radius.
The waypoints this function returns are for the 'static' nav mesh,
meaning that objects set to 'movable obstacle' or 'movable phantom'
are ignored.

This function can be used from attachments and other non-character objects. It
can also be used in any region, even if dynamic pathfinding is disabled.

The list also always contains an integer in the last element, which is a status
code indicating the outcome of the path query:
- If llGetStaticPath() finds a path, it will return waypoint vectors and will
return a status code of 0, for success
- If llGetStaticPath() cannot find a path for some reason, it only returns the
status code, indicating the sort of error. The error codes correspond to the
constants in path_update (e.g. PU_FAILURE_INVALID_START is returned if the start
vector is not near the nav mesh).">
				<Param name="vector start" />
				<Param name="vector end" />
				<Param name="float radius" />
				<Param name="list params" />
			</Overload>
		</KeyWord>

		<KeyWord name="llGetStatus" func="yes">
			<Overload retVal="integer" descr="Returns an integer boolean equal to the status of the object.">
				<Param name="integer status" />
			</Overload>
		</KeyWord>

		<KeyWord name="llGetSubString" func="yes">
			<Overload retVal="string" descr="Returns a string that is the substring of src from start to end,
leaving the original string intact.

start &amp; end support negative indexes.">
				<Param name="string src" />
				<Param name="integer start" />
				<Param name="integer end" />
			</Overload>
		</KeyWord>

		<KeyWord name="llGetSunDirection" func="yes">
			<Overload retVal="vector" descr="Returns a vector that is a normalized vector of the direction of
the sun in the region.

The sun position can be dynamic or static depending upon the wishes of the sim
owner." />
		</KeyWord>

		<KeyWord name="llGetTexture" func="yes">
			<Overload retVal="string" descr="Returns a string that is the texture on face.

If face is ALL_SIDES then the function returns the value for face zero. If the
texture is in the prim's inventory, the return value is the inventory name,
otherwise the returned value is the texture UUID.">
				<Param name="integer face" />
			</Overload>
		</KeyWord>

		<KeyWord name="llGetTextureOffset" func="yes">
			<Overload retVal="vector" descr="Returns a vector that is the texture offset of face in the x
('U', horizontal) and y ('V', vertical) components. The z component is unused.

If face is ALL_SIDES then the function returns the value for face zero. If face
indicates a face that does not exist the return is ZERO_VECTOR (&lt;0.0, 0.0, 0.0&gt;).">
				<Param name="integer face" />
			</Overload>
		</KeyWord>

		<KeyWord name="llGetTextureRot" func="yes">
			<Overload retVal="float" descr="Returns a float that is the texture rotation on face.

If face is ALL_SIDES then the function works on all sides. If face does not
exist, the function silently fails.">
				<Param name="integer" />
			</Overload>
		</KeyWord>

		<KeyWord name="llGetTextureScale" func="yes">
			<Overload retVal="vector" descr="Returns a vector that is the texture scale on face (only the x
and y components are used).

If face is ALL_SIDES then in this particular case the function works as if face
was 0.">
				<Param name="integer face" />
			</Overload>
		</KeyWord>

		<KeyWord name="llGetTime" func="yes">
			<Overload retVal="float" descr="Returns a float that is script time in seconds with subsecond
precision since the script started, was last reset, or call to either
llResetTime or llGetAndResetTime." />
		</KeyWord>

		<KeyWord name="llGetTimeOfDay" func="yes">
			<Overload retVal="float" descr="Returns a float that is the time in seconds with subsecond
precision since Second Life midnight or region up-time (time since when the
region was brought online/rebooted); whichever is smaller. If the region is
configured so the sun stays in a constant position, then the returned value is
the region up-time.
Second Life days cycles are 4 hours long (3 hours of light, 1 hour of dark). The
sunrise and sunset time varies slowly." />
		</KeyWord>

		<KeyWord name="llGetTimestamp" func="yes">
			<Overload retVal="string" descr="Returns a string that is the current date and time in the UTC
time zone in the format 'YYYY-MM-DDThh:mm:ss.ff..fZ'.

Appears to be accurate to milliseconds." />
		</KeyWord>

		<KeyWord name="llGetTorque" func="yes">
			<Overload retVal="vector" descr="Returns a vector that is the torque (if the script is physical)." />
		</KeyWord>

		<KeyWord name="llGetUnixTime" func="yes">
			<Overload retVal="integer" descr="Returns an integer that is the number of seconds elapsed since
00:00 hours, Jan 1, 1970 UTC from the system clock." />
		</KeyWord>

		<KeyWord name="llGetUsedMemory" func="yes">
			<Overload retVal="integer" descr="Returns the integer of the number of bytes of memory currently
in use by the script." />
		</KeyWord>

		<KeyWord name="llGetUsername" func="yes">
			<Overload retVal="string" descr="Returns a string that is the unique username of the avatar
specified by id.

id must specify a valid avatar key, present in or otherwise known to the sim in
which the script is running, otherwise an empty string is returned. This
function will still return a valid username if the avatar is a child agent of
the sim (i.e., in an adjacent sim, but presently able to see into the one the
script is in), or for a short period after the avatar leaves the sim
(specifically, when the client completely disconnects from the sim, either as a
main or child agent)."> 
				<Param name="key id" />
			</Overload>
		</KeyWord>

		<KeyWord name="llGetVel" func="yes">
			<Overload retVal="vector" descr="Returns a vector that is the velocity of the object.

Velocity reported is relative to the global coordinate frame (the object
rotation has no affect on this functions output)." />
		</KeyWord>

		<KeyWord name="llGetWallclock" func="yes">
			<Overload retVal="float" descr="Returns a float that is the time in seconds since midnight Pacific
time (PST/PDT), truncated to whole seconds.

For GMT use llGetGMTclock." />
		</KeyWord>

		<KeyWord name="llGiveInventory" func="yes">
			<Overload retVal="void" descr="Give inventory to destination.

If destination is an object then it must be in the same region.
If destination is an avatar they do not have to be in the same region, but the
delay is 2.0 seconds.">
				<Param name="key destination" />
				<Param name="string inventory" />
			</Overload>
		</KeyWord>

		<KeyWord name="llGiveInventoryList" func="yes">
			<Overload retVal="void" descr="Gives inventory items to target, creating a new folder to put them
in."> 			<Param name="key target" />
				<Param name="string folder" />
				<Param name="list inventory" />
			</Overload>
		</KeyWord>

		<KeyWord name="llGiveMoney" func="yes">
			<Overload retVal="integer" descr="Transfer amount of L$ money from script owner to destination
avatar.
Returns an integer that is always zero. In contrast llTransferLindenDollars
returns a key that can be used to match the function call to the resulting
transaction_result event and the transaction history.

To run this function the script must request the PERMISSION_DEBIT permission
with llRequestPermissions and it must be granted by the owner.">
				<Param name="key destination" />
				<Param name="integer amount" />
			</Overload>
		</KeyWord>

		<KeyWord name="llGround" func="yes">
			<Overload retVal="float" descr="Returns a float that is the ground height directly below the prim
position + offset in local coordinates.

The requested position needs to be in the same region. Only the x and y
coordinates in offset are important, the z component is ignored.">
				<Param name="vector offset" />
			</Overload>
		</KeyWord>

		<KeyWord name="llGroundContour" func="yes">
			<Overload retVal="vector" descr="Returns a vector that is the ground contour direction below the
prim position + offset. The contour is the direction of a contour line at that
point, that is the direction in which there is no change in elevation.

The requested position needs to be in the same region. Only the x and y
coordinates in offset are important, the z component is ignored.">
				<Param name="vector offset" />
			</Overload>
		</KeyWord>

		<KeyWord name="llGroundNormal" func="yes">
			<Overload retVal="vector" descr="Returns a vector that is the ground normal from the current
position + offset in local coordinates.

The requested position needs to be in the same region. Only the x and y
coordinates in offset are important, the z component is ignored.">
				<Param name="vector offset" />
			</Overload>
		</KeyWord>

		<KeyWord name="llGroundRepel" func="yes">
			<Overload retVal="void" descr="Critically damps to height if within height * 0.5 of ground or
water level (whichever is higher).

Do not use with vehicles.">
				<Param name="float height" />
				<Param name="boolean water" />
				<Param name="float tau" />
			</Overload>
		</KeyWord>

		<KeyWord name="llGroundSlope" func="yes">
			<Overload retVal="vector" descr="Returns a vector that is the ground slope below the object
position + offset in local coordinates.

The requested position needs to be in the same region. Only the x and y coordinates
in offset are important, the z component is ignored.">
				<Param name="vector offset" />
			</Overload>
		</KeyWord>

		<KeyWord name="llHMAC" func="yes">
			<Overload retVal="string" descr="Returns a string that is the Base64-encoded HMAC hash of msg when
using hash algorithm algorithm and secret key private_key.

This function supports md5, sha1, sha224, sha256, sha384, sha512 for algorithm.">
				<Param name="string private_key" />
				<Param name="string msg" />
				<Param name="string algorithm" />
			</Overload>
		</KeyWord>

		<KeyWord name="llHTTPRequest" func="yes">
			<Overload retVal="key" descr="Sends an HTTP request to the specified URL with the body of the
request and parameters.

Returns a key that is a handle identifying the HTTP request made.">
				<Param name="string url" />
				<Param name="list parameters" />
				<Param name="string body" />
			</Overload>
		</KeyWord>

		<KeyWord name="llHTTPResponse" func="yes">
			<Overload retVal="void" descr="Responds to request_id with status and body.

The response need not be made inside the http_request event but if it does not
happen in a timely fashion the request will time out (within 25 seconds).">
				<Param name="key request_id" />
				<Param name="integer status" />
				<Param name="string body" />
			</Overload>
		</KeyWord>

		<KeyWord name="llInsertString" func="yes">
			<Overload retVal="string" descr="Returns the string dst with src inserted starting at pos.

pos does not support negative indexes. i.e. unlike other somewhat similar string
functions such as llGetSubString and llDeleteSubString, you cannot use -1 for
the counting with this function. You may use instead the function provided a bit
further below.">
				<Param name="string dst" />
				<Param name="integer pos" />
				<Param name="string src" />
			</Overload>
		</KeyWord>

		<KeyWord name="llInstantMessage" func="yes">
			<Overload retVal="void" descr="Sends an Instant Message specified in the string message to the
user specified by user.

To send a message directly to an object, use llRegionSayTo or llEmail or
llHTTPRequest.">
				<Param name="key user" />
				<Param name="string message" />
			</Overload>
		</KeyWord>

		<KeyWord name="llIntegerToBase64" func="yes">
			<Overload retVal="string" descr="Returns a string that is a Base64 big endian encode of number.">
				<Param name="integer number" />
			</Overload>
		</KeyWord>

		<KeyWord name="llIsFriend" func="yes">
			<Overload retVal="integer" descr="Returns a boolean (an integer) that is TRUE if agent_id and
the owner of the prim the script is in are friends, otherwise FALSE.

* key agent_id">
				<Param name="key agent_id" />
			</Overload>
		</KeyWord>

		<KeyWord name="llJson2List" func="yes">
			<Overload retVal="list" descr="Convert a JSON compound value to an LSL list.">
				<Param name="string json" />
			</Overload>
		</KeyWord>

		<KeyWord name="llJsonGetValue" func="yes">
			<Overload retVal="string" descr="Returns a value from a JSON compound value.">
				<Param name="string json" />
				<Param name="list specifiers" />
			</Overload>
		</KeyWord>

		<KeyWord name="llJsonSetValue" func="yes">
			<Overload retVal="string" descr="Set a certain value within a JSON string, use JSON_APPEND as
specifier to the end of the array at that level.">
				<Param name="string json" />
				<Param name="list specifiers" />
				<Param name="string newValue" />
			</Overload>
		</KeyWord>

		<KeyWord name="llJsonValueType" func="yes">
			<Overload retVal="string" descr="Used to determine the type of a JSON value, returns one of the
following string constants:

- JSON_ARRAY
- JSON_FALSE
- JSON_INVALID
- JSON_NULL
- JSON_NUMBER
- JSON_OBJECT
- JSON_STRING
- JSON_TRUE">
				<Param name="string json" />
				<Param name="list specifiers" />
			</Overload>
		</KeyWord>

		<KeyWord name="llKey2Name" func="yes">
			<Overload retVal="string" descr="Returns a string that is the legacy name of the prim or avatar
specified by id.

id must specify a valid rezzed prim or avatar key, present in or otherwise known
to the sim in which the script is running, otherwise an empty string is returned.
In the case of an avatar, this function will still return a valid name if the
avatar is a child agent of the sim (i.e., in an adjacent sim, but presently able
to see into the one the script is in), or for a short period after the avatar
leaves the sim (specifically, when the client completely disconnects from the
sim, either as a main or child agent).

Keys of inventory items will not work; in the case of these, use
llGetInventoryName instead.">
				<Param name="key id" />
			</Overload>
		</KeyWord>

		<KeyWord name="llKeyCountKeyValue" func="yes">
			<Overload retVal="key" descr="Start an asynchronous transaction to request the number of keys in
the system.

Returns a handle (a key) that can be used to identify the corresponding
dataserver event to determine if this command succeeded or failed and the
results." />
		</KeyWord>

		<KeyWord name="llKeysKeyValue" func="yes">
			<Overload retVal="key" descr="Start an asynchronous transaction to request a number of keys.

Returns a handle (a key) that can be used to identify the corresponding
dataserver event to determine if this command succeeded or failed.

This function will attempt to retrieve the number of keys requested but may
return less if there are not enough to fulfill the full amount requested or if
the list is too large. The order keys are returned is not guaranteed but is
stable between subsequent calls as long as no keys are added or removed. The
error XP_ERROR_KEY_NOT_FOUND is returned if there index given is greater than or
equal to the number of keys.">
				<Param name="integer first" />
				<Param name="integer count" />
			</Overload>
		</KeyWord>

		<KeyWord name="llLinkAdjustSoundVolume" func="yes">
			<Overload retVal="void" descr="Adjusts volume of attached sound.
* integer link: Link number (0: unlinked, 1: root prim, >1: child prims and
seated avatars) or a LINK_* flag
* float volume: between 0.0 (silent) and 1.0 (loud) (0.0 &gt;= volume
&lt;= 1.0)">
				<Param name="integer link" />
				<Param name="float volume" />
			</Overload>
		</KeyWord>

		<KeyWord name="llLinkParticleSystem" func="yes">
			<Overload retVal="void" descr="A particle system defined by a list of rules is set for the prim(s)
link. This is identical to llParticleSystem except that it applies to a
specified linked prim and not just the prim the script is in.">
				<Param name="integer link" />
				<Param name="list rules" />
			</Overload>
		</KeyWord>

		<KeyWord name="llLinkPlaySound" func="yes">
			<Overload retVal="void" descr="Plays attached sound once at volume.

* integer link: Link number (0: unlinked, 1: root prim, &gt; 1: child prims
and seated avatars) or a LINK_* flag
* string sound: A sound in the inventory of the prim this script is in or a
UUID of a sound
* float volume: Between 0.0 (silent) and 1.0 (loud) (0.0 &gt;= volume &lt;= 1.0)
* integer flags: Bit flags used to control how the sound is played.">
				<Param name="integer link" />
				<Param name="string sound" />
				<Param name="float volume" />
				<Param name="integer flags" />
			</Overload>
		</KeyWord>

		<KeyWord name="llLinkSetSoundQueueing" func="yes">
			<Overload retVal="void" descr="Set whether attached sounds wait for the current sound to finish.
If queue is TRUE, queuing is enabled, if FALSE queuing is disabled. Sound
queuing is disabled by default. 
* integer link: Link number (0: unlinked, 1: root prim, &gt; 1: child prims and
seated avatars) or a LINK_*flag
* integer queue: Boolean, sound queuing: TRUE enables, FALSE (default) disables">
				<Param name="integer link" />
				<Param name="integer queue" />
			</Overload>
		</KeyWord>

		<KeyWord name="llLinkSetSoundRadius" func="yes">
			<Overload retVal="void" descr="Establishes a hard cut-off radius for audibility of scripted sounds
(both attached and triggered).

* integer link: Link number (0: unlinked, 1: root prim, &gt; 1: child prims and
seated avatars) or a LINK_* flag
* float radius: In meters">
				<Param name="integer link" />
				<Param name="float radius" />
			</Overload>
		</KeyWord>

		<KeyWord name="llLinkSitTarget" func="yes">
			<Overload retVal="void" descr="Set the sit location for the linked prim(s). The sit location is
relative to the prim's position and rotation. If offset is ZERO_VECTOR then
the sit target is removed.">
				<Param name="integer link" />
				<Param name="vector offset" />
				<Param name="rotation rot" />
			</Overload>
		</KeyWord>

		<KeyWord name="llLinkStopSound" func="yes">
			<Overload retVal="void" descr="Stops the attached sound(s) currently playing, if they were started
by llLoopSound

* integer link: Link number (0: unlinked, 1: root prim, &gt; 1: child prims and
seated avatars) or a LINK_* flag">
				<Param name="integer link" />
			</Overload>
		</KeyWord>

		<KeyWord name="llLinksetDataAvailable" func="yes">
			<Overload retVal="integer" descr="The llLinksetDataAvailable returns the number of bytes available
in the linkset's datastore.

Returns an integer number of bytes available in the linkset store." />
		</KeyWord>

		<KeyWord name="llLinksetDataCountFound" func="yes">
			<Overload retVal="integer" descr="The llLinksetDataCountFound function returns the number of keys
in the linkset datastore that match the pattern supplied in the pattern.

Returns an integer Count of the keys in the datastore that match the supplied
pattern.

* string pattern: A regular expression describing which keys to return.">
				<Param name="string pattern" />
			</Overload>
		</KeyWord>

		<KeyWord name="llLinksetDataCountKeys" func="yes">
			<Overload retVal="integer" descr="The llLinksetDataCountKeys returns the number of unique keys
that have been stored in the linkset's datastore.

Returns an integer number of keys used in the linkset store." />
		</KeyWord>

		<KeyWord name="llLinksetDataDelete" func="yes">
			<Overload retVal="integer" descr="Removes an unprotected name:value pair from the linkset's
datastore. If the pair was created.

Returns an integer success or failure code.">
				<Param name="string name" />
			</Overload>
		</KeyWord>

		<KeyWord name="llLinksetDataDeleteFound" func="yes">
			<Overload retVal="list" descr="The llLinksetDataDeleteFound function finds and attempts to delete
all keys in the data store that match pattern. This function will delete
protected key-value pairs only if the matching pass phrase is passed in the
pass parameter. The function returns a list, the first entry in the list is the
number of keys deleted, the second entry in the list is the number of keys that
could not be deleted due to a non-matching pass phrase. If this function
successfully deletes any keys from the datastore it will trigger a linkset_data
event with the type of LINKSET_DATA_MULTIDELETE, the key name will consist of a
comma separated list of the key names removed from the datastore.

Returns a list of the number of keys deleted or skipped.

* string pattern: A regular expression describing which keys to delete.
* string pass: Optional pass phrase to delete protected keys.">
				<Param name="string pattern" />
				<Param name="string pass" />
			</Overload>
		</KeyWord>

		<KeyWord name="llLinksetDataDeleteProtected" func="yes">
			<Overload retVal="integer" descr="The llLinksetDataDeleteProtected function erases a protected
name:value pair from the linkset's datastore.

Returns an integer success or failure code.">
				<Param name="string name" />
				<Param name="string pass" />
			</Overload>
		</KeyWord>

		<KeyWord name="llLinksetDataFindKeys" func="yes">
			<Overload retVal="list" descr="The llLinksetDataFindKeys function returns a list of up to count
keys from the datastore that match pattern, starting at the one indicated by
start. If count is less than 1, then all keys between start and the end which
match pattern are returned.

Returns a list of the keys in the datastore.">
				<Param name="string pattern" />
				<Param name="integer start" />
				<Param name="integer count" />
			</Overload>
		</KeyWord>

		<KeyWord name="llLinksetDataListKeys" func="yes">
			<Overload retVal="list" descr="The llLinksetDataListKeys function returns a list of up to count
keys in the datastore, starting at the one indicated by start. If count is less
than 1, then all keys between start and the end are returned.

Returns a list of the keys in the datastore.">
				<Param name="integer start" />
				<Param name="integer count" />
			</Overload>
		</KeyWord>

		<KeyWord name="llLinksetDataRead" func="yes">
			<Overload retVal="string" descr="Reads an unprotected name:value pair from the linkset's
datastore.

Returns a string value corresponding to name.">
				<Param name="string name" />
			</Overload>
		</KeyWord>

		<KeyWord name="llLinksetDataReadProtected" func="yes">
			<Overload retVal="string" descr="Reads a protected name:value pair from the datastore.

Returns a string value corresponding to name.">
				<Param name="string name" />
				<Param name="string pass" />
			</Overload>
		</KeyWord>

		<KeyWord name="llLinksetDataReset" func="yes">
			<Overload retVal="void" descr="The llLinksetDataReset function erases all name:value pairs stored
in the linkset's datastore.

When this function is called the linkset_data event is triggered in all scripts
running in the linkset with an action of LINKSETDATA_RESET." />
		</KeyWord>

		<KeyWord name="llLinksetDataWrite" func="yes">
			<Overload retVal="integer" descr="Creates or updates an unprotected name:value pair from the
linkset's datastore.

Returns an integer success or failure code.">
				<Param name="string name" />
				<Param name="string value" />
			</Overload>
		</KeyWord>

		<KeyWord name="llLinksetDataWriteProtected" func="yes">
			<Overload retVal="integer" descr="Creates or updates an protected name:value pair from the
linkset's datastore.

Further attempts to read, write or update the name:value pair must use the
protected versions of those functions and must supply the same string that was
used in pass.

Returns an integer success or failure code.">
				<Param name="string name" />
				<Param name="string value" />
				<Param name="string pass" />
			</Overload>
		</KeyWord>

		<KeyWord name="llList2CSV" func="yes">
			<Overload retVal="string" descr="Returns a string of comma separated values taken in order from
src. More precisely the values are separated with a comma and a space (&quot;, &quot;).
This function's functionality is equivalent to llDumpList2String(src, &quot;, &quot;);

The result of this function is more or less the CSV format, but it does not
conform in all its details.

To reverse the process use llCSV2List. But see the Caveat.">
				<Param name="list src" />
			</Overload>
		</KeyWord>

		<KeyWord name="llList2Float" func="yes">
			<Overload retVal="float" descr="Returns a float that is at index in src.

index supports negative indexes. If index describes a location not in src then
zero is returned. If the type of the element at index in src is not a float it
is typecast to a float. If it cannot be typecast zero is returned.">
				<Param name="list src" />
				<Param name="integer index" />
			</Overload>
		</KeyWord>

		<KeyWord name="llList2Integer" func="yes">
			<Overload retVal="integer" descr="Returns an integer that is at index in src.

index supports negative indexes. If index describes a location not in src then
zero is returned. If the type of the element at index in src is not a integer it
is typecast to a integer. If it cannot be typecast zero is returned.">
				<Param name="list src" />
				<Param name="integer index" />
			</Overload>
		</KeyWord>

		<KeyWord name="llList2Json" func="yes">
			<Overload retVal="string" descr="Converts a list to a JSON compound value.

- 'string type' must either be JSON_ARRAY or JSON_OBJECT, otherwise
JSON_INVALID is returned.
- If type is JSON_OBJECT, the list must have a stride of 2.">
				<Param name="string type" />
				<Param name="list values" />
			</Overload>
		</KeyWord>

		<KeyWord name="llList2Key" func="yes">
			<Overload retVal="key" descr="Returns a key that is at index in src.

index supports negative indexes. If index describes a location not in src then
null string is returned. If the type of the element at index in src is not a key
it is typecast to a key. If it cannot be typecast null string is returned.">
				<Param name="list src" />
				<Param name="integer index" />
			</Overload>
		</KeyWord>

		<KeyWord name="llList2List" func="yes">
			<Overload retVal="list" descr="Returns a list that is a slice of src from start to end.

start &amp; end support negative indexes.">
				<Param name="list src" />
				<Param name="integer start" />
				<Param name="integer end" />
			</Overload>
		</KeyWord>

		<KeyWord name="llList2ListSlice" func="yes">
			<Overload retVal="list" descr="Returns a list of the slice_indexapos;th element of every stride in
strided list whose index is a multiple of stride in the range start to end.">
				<Param name="list src" />
				<Param name="integer start" />
				<Param name="integer end" />
				<Param name="integer stride" />
				<Param name="integer slice_index" />
			</Overload>
		</KeyWord>

		<KeyWord name="llList2ListStrided" func="yes">
			<Overload retVal="list" descr="Returns a list of all the entries in the strided list whose index
is a multiple of stride in the range start to end.

If number of entries per stride is less then 1 it is assumed to be 1. This
function supports Strided Lists."> 
				<Param name="list src" />
				<Param name="integer start" />
				<Param name="integer end" />
				<Param name="integer stride" />
			</Overload>
		</KeyWord>

		<KeyWord name="llList2Rot" func="yes">
			<Overload retVal="rotation" descr="Returns a rotation that is at index in src.

index supports negative indexes. If index describes a location not in src then
ZERO_ROTATION is returned.

If the type of the element at index in src is not a rotation then ZERO_ROTATION
is returned.

Here is a workaround: (rotation)llList2String(src, index);">
				<Param name="list src" />
				<Param name="integer index" />
			</Overload>
		</KeyWord>

		<KeyWord name="llList2String" func="yes">
			<Overload retVal="string" descr="Returns a string that is at index in src.

index supports negative indexes. If index describes a location not in src then
null string is returned. If the type of the element at index in src is not a
string it is typecast to a string.">
				<Param name="list src" />
				<Param name="integer index" />
			</Overload>
		</KeyWord>

		<KeyWord name="llList2Vector" func="yes">
			<Overload retVal="vector" descr="Returns a vector that is at index in src.

index supports negative indexes. If index describes a location not in src then
ZERO_VECTOR is returned. If the type of the element at index in src is not a
vector then ZERO_VECTOR is returned.

Here is a workaround: (vector)llList2String(src, index);">
				<Param name="list src" />
				<Param name="integer index" />
			</Overload>
		</KeyWord>

		<KeyWord name="llListFindList" func="yes">
			<Overload retVal="integer" descr="Returns a positive zero-based integer that is the index of the
first instance of test in src.

Strict type matching and case sensitivity is enforced.

If test is not found in src, -1 is returned. The index of the first entry in the
list is 0, the last is (length - 1).">
				<Param name="list src" />
				<Param name="list test" />
			</Overload>
		</KeyWord>

		<KeyWord name="llListFindListNext" func="yes">
			<Overload retVal="integer" descr="Returns the integer index of the nth instance of test in src.

* list src: what to search in (haystack)
* list test: what to search for (needles)
* integer instance: which instance (needle) to return

If test is not found in src, -1 is returned.
The index of the first entry in the list is 0.
An expansion of llListFindList which adds an instance parameter to select the
nth match to test parameter. llListFindListNext(src, test, 0); is functionally
equivalent to llListFindList(src, test); Given a list like ['Resident',
'Alexia', 'Resident', 'Bob', 'Resident', 'Steve', 'Resident', 'Evil'] using a
test of ['Resident'] and an instance of 0, 1, 2, 3 would return indices of 0, 2
 4, and 6 respectively. Selecting the 4th or greater instance will not be found
and will return -1. Reverse indexing is also supported. Using an instance of -1
 -2, -3, -4 would respectively return 6, 4, 2, 0 And -5 and lower would again
return -1. If test is found at the last index in src the positive index is
returned (5th entry of 5 returns 4).">
				<Param name="list src" />
 				<Param name="list test" />
				<Param name="integer instance" />
			</Overload>
		</KeyWord>

		<KeyWord name="llListFindListStrided" func="yes">
			<Overload retVal="list" descr="">
				<Param name="list src" />
			</Overload>
		</KeyWord>

		<KeyWord name="llListInsertList" func="yes">
			<Overload retVal="list" descr="Returns a list that contains all the elements from dest but with
the elements from src inserted at position start.

start supports negative indexes.">
				<Param name="list dest" />
				<Param name="list src" />
				<Param name="integer start" />
			</Overload>
		</KeyWord>

		<KeyWord name="llListRandomize" func="yes">
			<Overload retVal="list" descr="Returns a list which is a randomized permutation of src.

This function supports Strided Lists.">
				<Param name="list src" />
				<Param name="integer stride" />
			</Overload>
		</KeyWord>

		<KeyWord name="llListReplaceList" func="yes">
			<Overload retVal="list" descr="Returns a list that is dest with start through end removed and src
inserted at start.

start &amp; end support negative indexes.">
				<Param name="list dest" />
				<Param name="list src" />
				<Param name="integer start" />
				<Param name="integer end" />
			</Overload>
		</KeyWord>

		<KeyWord name="llListSort" func="yes">
			<Overload retVal="list" descr="Returns a list that is src sorted by stride.

This function supports Strided Lists.">
				<Param name="list src" />
				<Param name="integer stride" />
				<Param name="boolean ascending" />
			</Overload>
		</KeyWord>

		<KeyWord name="llListSortStrided" func="yes">
			<Overload retVal="list" descr="Returns a list that is src sorted by the stride_index item in
every stride.

* src: List to be sorted.
* stride: Number of entries per stride, if less than 1 it is assumed to be 1.
* stride_index: The index within the stride to sort by. stride_index is
0-indexed 

The first element is 0, second 1, etc. An index of 0 is functionally identical
to using llListSort. ascending: If TRUE then the sort order is ascending,
otherwise the order is descending. 
This function supports Strided Lists.">
				<Param name="list src" />
				<Param name="integer stride" />
				<Param name="integer stride_index" />
				<Param name="boolean ascending" />
			</Overload>
		</KeyWord>

		<KeyWord name="llListStatistics" func="yes">
			<Overload retVal="float" descr="Returns a float that is the result of performing statistical
aggregate function operation on src.

If a list entry type is not a float or an integer it is silently ignored.">
				<Param name="integer operation" />
				<Param name="list src" />
			</Overload>
		</KeyWord>

		<KeyWord name="llListen" func="yes">
			<Overload retVal="integer" descr="Sets a callback for msg on channel from name and id. Returns an
integer that can be used to deactivate or remove the listen.

If msg, name or id are blank they are not used to filter incoming messages. If
id is an invalid key or a null key, it is considered blank.">
				<Param name="integer channel" />
				<Param name="string name" />
				<Param name="key id" />
				<Param name="string message" />
			</Overload>
		</KeyWord>

		<KeyWord name="llListenControl" func="yes">
			<Overload retVal="void" descr="Makes listen event callback handle active or inactive.">
				<Param name="integer handle" />
				<Param name="boolean active" />
			</Overload>
		</KeyWord>

		<KeyWord name="llListenRemove" func="yes">
			<Overload retVal="void" descr="Removes listen event callback handle.">
				<Param name="integer handle" />
			</Overload>
		</KeyWord>

		<KeyWord name="llLoadURL" func="yes">
			<Overload retVal="void" descr="Shows dialog to avatar offering to load web page at url with
message. If user clicks yes, launches the page in their web browser, starting
the browser if required.

The url is truncated to 255 characters and message is truncated to 254
characters. The protocol for the url must be specified, currently only
'https://' and 'http://' are supported. The URL should be RFC-1738 compliant
with proper escapes.">
				<Param name="key avatar" />
				<Param name="string message" />
				<Param name="string url" />
			</Overload>
		</KeyWord>

		<KeyWord name="llLog" func="yes">
			<Overload retVal="float" descr="Returns a float that is the natural logarithm of val. If val &lt;= 0
returns 0.0 instead.


To get the base 10 logarithm use llLog10.">
				<Param name="float val" />
			</Overload>
		</KeyWord>

		<KeyWord name="llLog10" func="yes">
			<Overload retVal="float" descr="Returns a float that is the base 10 logarithm of val. If val &lt;= 0
returns 0.0 instead.

To get the natural logarithm use llLog. llLog10 should only be used where the
base 10 log is needed, all other applications should use llLog instead.">
				<Param name="float val" />
			</Overload>
		</KeyWord>

		<KeyWord name="llLookAt" func="yes">
			<Overload retVal="void" descr="Cause object to point its up axis (positive z) towards target,
while keeping its forward axis (positive x) below the horizon.

Continues to track target until llStopLookAt is called.

To change the position in the same manner use llMoveToTarget.">
				<Param name="vector target" />
				<Param name="float strength" />
				<Param name="float dampening" />
			</Overload>
		</KeyWord>

		<KeyWord name="llLoopSound" func="yes">
			<Overload retVal="void" descr="Plays attached sound looping indefinitely at volume.

sound in the prim's inventory or a UUID.
volume between [0.0 &gt;= x &lt;= 1.0] where 0.0 (silent) and 1.0 (max volume).">
				<Param name="string sound" />
				<Param name="float volume" />
			</Overload>
		</KeyWord>

		<KeyWord name="llLoopSoundMaster" func="yes">
			<Overload retVal="void" descr="Plays attached sound looping at volume, declares it a sync master.

sound in the prim's inventory or a UUID.
volume between [0.0 &gt;= x &lt;= 1.0 ] where 0.0 (silent) and 1.0 (max volume).">
				<Param name="string sound" />
				<Param name="float volume" />
			</Overload>
		</KeyWord>

		<KeyWord name="llLoopSoundSlave" func="yes">
			<Overload retVal="void" descr="Plays attached sound looping at volume, synced to most audible sync
master declared by llLoopSoundMaster.

sound in the prim's inventory or a UUID.
volume between [0.0 &gt;= x &lt;= 1.0 ] where 0.0 (silent) and 1.0 (max volume).">
				<Param name="string sound" />
				<Param name="float volume" />
			</Overload>
		</KeyWord>

		<KeyWord name="llMD5String" func="yes">
			<Overload retVal="string" descr="Returns a string of 32 hex characters that is the MD5 checksum of
src with a salt of ':' + nonce.">
				<Param name="string src" />
				<Param name="integer nonce" />
			</Overload>
		</KeyWord>

		<KeyWord name="llManageEstateAccess" func="yes">
			<Overload retVal="boolean" descr="Use to add or remove agents from the estate's agent access or
ban lists or groups from the estate's group access list.

Returns an integer representing a boolean, TRUE if the call was successful;
FALSE if throttled, invalid action invalid or null id or object owner is not
allowed to manage the estate.

Only works for objects owned by the Estate Owner or an Estate Manager. By
default, the object owner is notified of every change made using this function.
But if the owner grants PERMISSION_SILENT_ESTATE_MANAGEMENT to the script, the
owner will not be notified.">
				<Param name="integer action" />
				<Param name="key avatar" />
			</Overload>
		</KeyWord>

		<KeyWord name="llMapDestination" func="yes">
			<Overload retVal="void" descr="Opens world map centered on simname with pos highlighted. Only
works for scripts attached to avatar, or during touch events.

NOTE: look_at currently does nothing.">
				<Param name="string simname" />
				<Param name="vector pos" />
				<Param name="vector look_at" />
			</Overload>
		</KeyWord>

		<KeyWord name="llMessageLinked" func="yes">
			<Overload retVal="void" descr="The purpose of this function is to allow scripts in the same object
to communicate.

It triggers a link_message event with the same parameters num, str, and id in
all scripts in the prim(s) described by link.

You can use id as a second string field[2]. The sizes of str and id are only
limited by available script memory.">
				<Param name="integer link" />
				<Param name="integer num" />
				<Param name="string str" />
				<Param name="key id" />
			</Overload>
		</KeyWord>

		<KeyWord name="llMinEventDelay" func="yes">
			<Overload retVal="void" descr="Set the minimum time between events being handled.

Defaults and minimums vary by the event type, see LSL Delay.">
				<Param name="float delay" />
			</Overload>
		</KeyWord>

		<KeyWord name="llModPow" func="yes">
			<Overload retVal="integer" descr="Returns an integer that is a raised to the b power, mod c.
( (a**b)%c )">
				<Param name="integer a" />
				<Param name="integer b" />
				<Param name="integer c" />
			</Overload>
		</KeyWord>

		<KeyWord name="llModifyLand" func="yes">
			<Overload retVal="void" descr="Modify land with action on brush.

The position of the prim is used to determine the input for various flags.">
				<Param name="integer action" />
				<Param name="integer brush" />
			</Overload>
		</KeyWord>

		<KeyWord name="llMoveToTarget" func="yes">
			<Overload retVal="void" descr="Critically damp to target in tau seconds (if the script is
physical).

To stop the object from maintaining the target positions use llStopMoveToTarget.
To change the rotation in the same manner use llLookAt or llRotLookAt.">
				<Param name="vector target" />
				<Param name="float tau" />
			</Overload>
		</KeyWord>

		<KeyWord name="llName2Key" func="yes">
			<Overload retVal="void" descr="Returns a key the Agent ID for the named agent in the region.
If there is no agent with the specified name currently signed onto the region,
this function returns the value NULL_KEY.">
				<Param name="string name" />
			</Overload>
		</KeyWord>

		<KeyWord name="llNavigateTo" func="yes">
			<Overload retVal="void" descr="Directs an object to travel to a defined position in the region or
adjacent regions.

Adjacent regions can be reached by extending the position vector into the nearby
region.">
				<Param name="vector pos" />
				<Param name="list options" />
			</Overload>
		</KeyWord>

		<KeyWord name="llOffsetTexture" func="yes">
			<Overload retVal="void" descr="Sets the texture u &amp; v offsets for the chosen face.

u is horizontal (x) offset in the interval [-1.0, 1.0]
v is vertical (y) offset in the interval [-1.0, 1.0]

If face is ALL_SIDES then the function works on all sides.">
				<Param name="float u" />
				<Param name="float v" />
				<Param name="integer face" />
			</Overload>
		</KeyWord>

		<KeyWord name="llOpenRemoteDataChannel" func="yes">
			<Overload retVal="void" descr="Creates a channel to listen for XML-RPC calls. Will trigger a
remote_data event with channel id once it is available." />
		</KeyWord>

		<KeyWord name="llOrd" func="yes">
			<Overload retVal="integer" descr="Calculate the ordinal value for a character in a string.

Returns an integer.

* string val: Source string for character ordinal.
* integer index: Index of character ordinal to retrieve.

index supports negative indexes. The returned value is the UTF-32 value of the
character at the specified index. If index is outside the bounds of the string,
this function returns 0.">
				<Param name="string val" />
				<Param name="integer index" />
			</Overload>
		</KeyWord>

		<KeyWord name="llOverMyLand" func="yes">
			<Overload retVal="boolean" descr="Returns an integer boolean, TRUE if id is over land owned by the
script owner, FALSE otherwise.

On group deeded land the object containing the script must be deeded to the same
group (It is not enough to set the script to the group.)">
				<Param name="key id" />
			</Overload>
		</KeyWord>

		<KeyWord name="llOwnerSay" func="yes">
			<Overload retVal="void" descr="Says message to the owner only.">
				<Param name="string message" />
			</Overload>
		</KeyWord>

		<KeyWord name="llParcelMediaCommandList" func="yes">
			<Overload retVal="void" descr="Controls the playback of movies and other multimedia resources on a
parcel or for an agent.">
				<Param name="list commands" />
			</Overload>
		</KeyWord>

		<KeyWord name="llParcelMediaQuery" func="yes">
			<Overload retVal="list" descr="Returns a list containing results of query. The results are in the
same order as the request.">
				<Param name="list query" />
			</Overload>
		</KeyWord>

		<KeyWord name="llParseString2List" func="yes">
			<Overload retVal="list" descr="Returns a list that is src broken into a list of strings,
discarding separators, keeping spacers, discards any null values generated.">
				<Param name="string source" />
				<Param name="list separators" />
				<Param name="list spacers" />
			</Overload>
		</KeyWord>

		<KeyWord name="llParseStringKeepNulls" func="yes">
			<Overload retVal="list" descr="Returns a list that is src broken into a list, discarding
separators, keeping spacers, keeping any null values generated.">
				<Param name="string source" />
				<Param name="separators" />
				<Param name="spacers" />
			</Overload>
		</KeyWord>

		<KeyWord name="llParticleSystem" func="yes">
			<Overload retVal="void" descr="Defines a particle system for the containing prim based on a list
of rules.">
				<Param name="list rules" />
			</Overload>
		</KeyWord>

		<KeyWord name="llPassCollisions" func="yes">
			<Overload retVal="void" descr="Sets pass-collisions prim attribute.

The default is FALSE if there is no script to handle the collision events in
the prim.">
				<Param name="boolean pass" />
			</Overload>
		</KeyWord>

		<KeyWord name="llPassTouches" func="yes">
			<Overload retVal="void" descr="Sets pass-touches prim attribute.

The default is TRUE if there is no script to handle the touch events in the prim.">
				<Param name="boolean pass" />
			</Overload>
		</KeyWord>

		<KeyWord name="llPatrolPoints" func="yes">
			<Overload retVal="void" descr="Sets the object patrolling between the points specified in
patrol_points.">
				<Param name="list patrol_points" />
				<Param name="list options" />
			</Overload>
		</KeyWord>

		<KeyWord name="llPlaySound" func="yes">
			<Overload retVal="void" descr="Plays attached sound once at volume.">
				<Param name="string sound" />
				<Param name="float volume" />
			</Overload>
		</KeyWord>

		<KeyWord name="llPlaySoundSlave" func="yes">
			<Overload retVal="void" descr="Plays attached sound once at volume, synced to next loop of most
audible sync master declared by llLoopSoundMaster.">
				<Param name="string sound" />
				<Param name="float volume" />
			</Overload>
		</KeyWord>

		<KeyWord name="llPow" func="yes">
			<Overload retVal="float" descr="Returns a float that is base raised to the power exponent (base ^
exponent).

Triggers a Math Error for imaginary results ((exponent != (integer)exponent) &amp;&amp;
(base &lt; 0.0)).">
				<Param name="float base" />
				<Param name="float exponent" />
			</Overload>
		</KeyWord>

		<KeyWord name="llPreloadSound" func="yes">
			<Overload retVal="void" descr="Preloads sound on viewers within range.">
				<Param name="string sound" />
			</Overload>
		</KeyWord>

		<KeyWord name="llPursue" func="yes">
			<Overload retVal="void" descr="Causes the object to pursue target.">
				<Param name="key target" />
				<Param name="list options" />
			</Overload>
		</KeyWord>

		<KeyWord name="llPushObject" func="yes">
			<Overload retVal="void" descr="Applies impulse and ang_impulse to object target.">
				<Param name="key target" />
				<Param name="vector impulse" />
				<Param name="vector ang_impulse" />
				<Param name="boolean local" />
			</Overload>
		</KeyWord>

		<KeyWord name="llReadKeyValue" func="yes">
			<Overload retVal="key" descr="Start an asynchronous transaction to read the value associated with
the specified key and the specified experience.

Returns a handle (a key) that can be used to identify the corresponding
dataserver event to determine if this command succeeded or failed and the
results.">
				<Param name="string k" />
			</Overload>
		</KeyWord>

		<KeyWord name="llRegionSay" func="yes">
			<Overload retVal="void" descr="Says the string message on channel number channel that can be heard
anywhere in the region by a script listening on channel.

Regardless of where the prim is, the message will not travel over region
borders."> 
				<Param name="integer channel" />
				<Param name="string message" />
			</Overload>
		</KeyWord>

		<KeyWord name="llRegionSayTo" func="yes">
			<Overload retVal="void" descr="Says the text supplied in string msg on channel supplied in integer
channel to the object or avatar specified by target.">
				<Param name="key target" />
				<Param name="integer channel" />
				<Param name="string message" />
			</Overload>
		</KeyWord>

		<KeyWord name="llReleaseControls" func="yes">
			<Overload retVal="void" descr="Stop taking inputs (that were taken with llTakeControls), dequeues
any remaining control events. If PERMISSION_TAKE_CONTROLS was previously
granted, it will be revoked." />
		</KeyWord>

		<KeyWord name="llReleaseURL" func="yes">
			<Overload retVal="void" descr="Releases the specified URL, it will no longer be usable.">
				<Param name="string url" />
			</Overload>
		</KeyWord>

		<KeyWord name="llRemoteDataReply" func="yes">
			<Overload retVal="void" descr="Send an XML-RPC reply on channel to message_id with payload of
string sdata and integer idata.">
				<Param name="key channel" />
				<Param name="key message_id" />
				<Param name="string sdata" />
				<Param name="integer idata" />
			</Overload>
		</KeyWord>

		<KeyWord name="llRemoteLoadScriptPin" func="yes">
			<Overload retVal="void" descr="Copy script name into target and set to running with a start_param
only if target's pin matches pin.

Only works if the script owner can modify target.">
				<Param name="key target" />
				<Param name="string name" />
				<Param name="integer pin" />
				<Param name="integer running" />
				<Param name="integer start_param" />
			</Overload>
		</KeyWord>

		<KeyWord name="llRemoveFromLandBanList" func="yes">
			<Overload retVal="void" descr="Remove avatar from the land ban list.">
				<Param name="key avatar" />
			</Overload>
		</KeyWord>

		<KeyWord name="llRemoveFromLandPassList" func="yes">
			<Overload retVal="void" descr="Remove avatar from the land access / pass list.">
				<Param name="key avatar" />
			</Overload>
		</KeyWord>

		<KeyWord name="llRemoveInventory" func="yes">
			<Overload retVal="void" descr="Removes inventory item name from the prim containing the script.">
				<Param name="string name" />
			</Overload>
		</KeyWord>

		<KeyWord name="llRemoveVehicleFlags" func="yes">
			<Overload retVal="void" descr="Removes the enabled bits in flags.">
				<Param name="integer flags" />
			</Overload>
		</KeyWord>

		<KeyWord name="llReplaceAgentEnvironment" func="yes">
			<Overload retVal="integer" descr="The llReplaceAgentEnvironment function overrides the current
region and parcel environment seen by an agent.

The new environment persists until the agent crosses to a new region or this
function is called with the NULL_KEY or empty string in the environment
parameter for the particular agent, doing so will strip all environmental
settings applied to this agent as part of the experience.

This function must be executed as part of an experience.">
				<Param name="key agent_id" />
				<Param name="float transition" />
				<Param name="string environment" />
			</Overload>
		</KeyWord>

		<KeyWord name="llReplaceEnvironment" func="yes">
			<Overload retVal="integer" descr="The llReplaceEnvironment function replaces the environment in a
parcel or a region. Either for a single elevation track or the entire
environment. The owner of the script must have permission to edit the
environment on the destination parcel, or be an estate manage in the case of an
entire region. In most cases errors are reported as a return value from the
function (see table below). However, issues with the environment assets may be
reported in the debug chat.

Returns an Integer

* vector position: The position in the region of the parcel that will receive
the new environment. To change the entire region use &lt;-1, -1, -1&gt;. The z
component of the vector is ignored.
* string environment: The name of an environmental setting in the object's
inventory or the asset ID for an environment. NULL_KEY or empty string to remove
the environment.
* integer track_no: The elevation zone to change. 0 for water, 1 for ground
level, 2 for sky 1000m, 3 for sky 2000m, 4 for sky 3000m. -1 to change all
tracks.
* integer day_length: The length in seconds for the day cycle. -1 to leave
unchanged.
* integer day_offset: The offset in seconds from UTC. -1 to leave unchanged.">
				<Param name="vector position" />
				<Param name="string environment" />
				<Param name="integer track_no" />
				<Param name="integer day_length" />
				<Param name="integer day_offset" />
			</Overload>
		</KeyWord>

		<KeyWord name="llReplaceSubString" func="yes">
			<Overload retVal="string" descr="Returns a string that is the result of replacing the first count
matching instances pattern in src with replacement_pattern.

If count = 0, all matching substrings are replaced. If count &gt; 0, substrings
are replaced starting from the left/beginning of src.
If count &lt; 0, substrings are replaced starting from the right/end of src.">
				<Param name="string src" />
				<Param name="string pattern" />
				<Param name="string replacement_pattern" />
				<Param name="integer count" />
			</Overload>
		</KeyWord>

		<KeyWord name="llRequestAgentData" func="yes">
			<Overload retVal="key" descr="Requests data about agent identified by id. ONLY when data is
available the dataserver event will be raised.

Returns a key that is used to identify the dataserver event when it is raised.">
				<Param name="key id" />
				<Param name="integer data" />
			</Overload>
		</KeyWord>

		<KeyWord name="llRequestDisplayName" func="yes">
			<Overload retVal="key" descr="Requests the Display Name of the agent identified by id. When the
Display Name is available the dataserver event will be raised. The agent
identified by id does not need to be in the same region or online at the time of
the request.

Returns the key that is used to identify the dataserver event when it is raised.">
				<Param name="key id" />
			</Overload>
		</KeyWord>

		<KeyWord name="llRequestExperiencePermissions" func="yes">
			<Overload retVal="void" descr="Asks the agent for permission to participate in an experience.

This request is similar to llRequestPermissions with all the following
permissions: PERMISSION_TAKE_CONTROLS, PERMISSION_TRIGGER_ANIMATION, PERMISSION_ATTACH,
PERMISSION_TRACK_CAMERA, PERMISSION_CONTROL_CAMERA and PERMISSION_TELEPORT.
However, unlike llRequestPermissions, the decision to allow or block the request
is persistent and applies to all scripts using the experience grid-wide.

Subsequent calls to llRequestExperiencePermissions from scripts in the experience
will receive the same response automatically with no user interaction.

Either experience_permissions or experience_permissions_denied will be generated
in response to this call. If no response is given by the agent, the request will
time out after at least 5 minutes. Multiple requests by the same script can be
made during this time out though the script can only have permission for one agent
at a time.

Agents in god mode and estate managers will always see the permission dialog even
if the experience has been previously approved.

Outstanding permission requests will be lost if the script is de-rezzed, moved to
another region, or reset.">
				<Param name="key agent" />
				<Param name="string name" />
			</Overload>
		</KeyWord>

		<KeyWord name="llRequestInventoryData" func="yes">
			<Overload retVal="key" descr="Requests data about the item name in the prim's inventory.
When data is available the dataserver event will be raised.

Returns the key that is used to identify the dataserver event when it is raised.">
				<Param name="string name" />
			</Overload>
		</KeyWord>

		<KeyWord name="llRequestPermissions" func="yes">
			<Overload retVal="void" descr="Ask agent for permissions to run certain classes of functions.

Script execution continues without waiting for a response. When a response is
given, a run_time_permissions event is added to the event queue.">
				<Param name="key agent" />
				<Param name="integer permissions" />
			</Overload>
		</KeyWord>

		<KeyWord name="llRequestSecureURL" func="yes">
			<Overload retVal="key" descr="Requests one HTTPS:// (SSL) url for use by this object.
The http_request event is tiggered with results.

Returns a key that is the handle used for identifying the request in the
http_request event." />
		</KeyWord>

		<KeyWord name="llRequestSimulatorData" func="yes">
			<Overload retVal="key" descr="Requests data about region. When data is available the dataserver
event will be raised.

Returns a key that is the handle for a dataserver event response.">
				<Param name="string region" />
				<Param name="integer data" />
			</Overload>
		</KeyWord>

		<KeyWord name="llRequestURL" func="yes">
			<Overload retVal="key" descr="Requests one HTTP:// url for use by this script. The http_request
event is triggered with the result of the request.

Returns a key that is the handle used for identifying the result in the
http_request event." />
		</KeyWord>

		<KeyWord name="llRequestUserKey" func="yes">
			<Overload retVal="key" descr="Requests the Agent ID for the agent identified by name from the
dataserver. The name given may be either the current name of an avatar or a
historical name that has been used in the past. If no agent can be found with the
supplied name this function returns the value NULL_KEY.

Returns a handle (a key) that can be used to identify the request when the
dataserver event is raised.

The agent being searched for with this function does not need to be signed on to
Second Life.

Returns a key.

* string username: the username of the avatar to retrieve the UUID of.">
				<Param name="string username" />
			</Overload>
		</KeyWord>

		<KeyWord name="llRequestUsername" func="yes">
			<Overload retVal="key" descr="Requests the Username of the agent identified by id. When Username is
available the dataserver event will be raised. The agent identified by id does not
need to be in the same region or online at the time of the request.

Returns a key that is used to identify the dataserver event when it is raised.">
				<Param name="key id" />
			</Overload>
		</KeyWord>

		<KeyWord name="llResetAnimationOverride" func="yes">
			<Overload retVal="void" descr="Resets the animation override of the specified animation state
(anim_state) to the corresponding default value.

* string anim_state: animation state to be reset

To run this function the script must request the PERMISSION_OVERRIDE_ANIMATIONS
permission with llRequestPermissions. If anim_state equals &quot;ALL&quot;, all
animation states are reset.">
				<Param name="string anim_state" />
			</Overload>
		</KeyWord>

		<KeyWord name="llResetLandBanList" func="yes">
			<Overload retVal="void" descr="Removes all residents from the land ban list." />
		</KeyWord>

		<KeyWord name="llResetLandPassList" func="yes">
			<Overload retVal="void" descr="Removes all residents from the land access/pass list." />
		</KeyWord>

		<KeyWord name="llResetOtherScript" func="yes">
			<Overload retVal="void" descr="Resets script name.

On script reset...
- The current event/function is exited without further execution or return.
- All global variables are set to their defaults.
- The event queue is cleared, and recurring events are stopped.
- The default state is set as the active state.
- If it has a state_entry event, then it is queued.">
				<Param name="string name" />
			</Overload>
		</KeyWord>

		<KeyWord name="llResetScript" func="yes">
			<Overload retVal="void" descr="Resets the script.

On script reset...
- The current event/function is exited without further execution or return.
- All global variables are set to their defaults.
- The event queue is cleared.
- The default state is set as the active state.
- If it has a state_entry event, then it is queued." />
		</KeyWord>

		<KeyWord name="llResetTime" func="yes">
			<Overload retVal="void" descr="Resets the script-time timer to zero." />
		</KeyWord>

		<KeyWord name="llReturnObjectsByID" func="yes">
			<Overload retVal="integer" descr="Returns all objects in &quot;list objects&quot; to their owner.

If the script is owned by an agent, PERMISSION_RETURN_OBJECTS may be granted by
the owner. If the script is owned by a group, this permission may be granted by an
agent belonging to the group's &quot;Owners&quot; role.

Returns an integer that is the number of objects successfully returned to their
owners or an ERR_* flag.

* list objects: list of object uuids (keys)

To run this function the script must request the PERMISSION_RETURN_OBJECTS
permission with llRequestPermissions. If the return value is negative, it
represents an error flag.

Throttled at max parcel land impact capacity region-wide per hour. Returns the
number of objects that were returned to their owners or one of the error codes:
- ERR_GENERIC (-1)
- ERR_PARCEL_PERMISSIONS (-2)
- ERR_MALFORMED_PARAMS (-3)
- ERR_RUNTIME_PERMISSIONS (-4)
- ERR_THROTTLED (-5)">
				<Param name="list objects" />
			</Overload>
		</KeyWord>

		<KeyWord name="llReturnObjectsByOwner" func="yes">
			<Overload retVal="integer" descr="- Requires runtime permission PERMISSION_RETURN_OBJECTS.

If the script is owned by an agent, PERMISSION_RETURN_OBJECTS may be granted by
the owner. If the script is owned by a group, this permission may be granted by
an agent belonging to the group's &quot;Owners&quot; role.

Scope is:
- OBJECT_RETURN_PARCEL
	Return all objects on the same parcel as the script which are owned by owner.
	The script must be owned by an estate manager or over a parcel owned by the
	owner of the script.
- OBJECT_RETURN_PARCEL_OWNER
	Return all objects owned by owner which are over parcels owned by the owner of
	the script.
- OBJECT_RETURN_REGION
	Return all objects in the region owned by owner.
	The script must be owned by the estate owner or an estate manager.

Error codes:
- ERR_GENERIC (-1)
	A nebulous and inexplicable error, nothing is known about it.
- ERR_PARCEL_PERMISSIONS (-2)
	Permission lacked to perform task on specified parcel.
- ERR_MALFORMED_PARAMS (-3)
	Parameters are malformed.
- ERR_RUNTIME_PERMISSIONS (-4)
	Script lacks the runtime permission to perform the requested task.
- ERR_THROTTLED (-5)
	Task has been throttled. Try again later.">
				<Param name="key owner" />
				<Param name="integer scope" />
			</Overload>
		</KeyWord>

		<KeyWord name="llRezAtRoot" func="yes">
			<Overload retVal="void" descr="Instantiate inventory object item rotated to rot with its root at
position, moving at velocity, using start_param as the start parameter.

To rez an object so its center is at position (instead of the root) use
llRezObject instead.">
				<Param name="string item" />
				<Param name="vector position" />
				<Param name="vector velocity" />
				<Param name="rotation rot" />
				<Param name="integer start_param" />
			</Overload>
		</KeyWord>

		<KeyWord name="llRezObject" func="yes">
			<Overload retVal="void" descr="Instantiate inventory object item at pos with velocity and rotation
rot with start_param as the start parameter.

The root of inventory is not at pos but the center of inventory is. To have the
root prim at pos use llRezAtRoot instead.">
				<Param name="string item" />
				<Param name="vector pos" />
				<Param name="vector velocity" />
				<Param name="rotation rot" />
				<Param name="integer start_param" />
			</Overload>
		</KeyWord>

		<KeyWord name="llRezObjectWithParams" func="yes">
			<Overload retVal="key" descr="Instantiate inventory object at pos with an initial set of
parameters specified in params.

pos will default to the position of the object containing the script, unless
REZ_POS is specified (see below).

Returns a key which will be the key of the object when it is successfully rezzed
in the world.

* string inventory: An object in the inventory of the prim this script is in
* list params">
				<Param name="string inventory" />
				<Param name="list params" />
			</Overload>
		</KeyWord>

		<KeyWord name="llRot2Angle" func="yes">
			<Overload retVal="float" descr="Returns a float that is the rotation angle represented by rot.

Use in conjunction with llRot2Axis. To undo use llAxisAngle2Rot.">
				<Param name="rotation rot" />
			</Overload>
		</KeyWord>

		<KeyWord name="llRot2Axis" func="yes">
			<Overload retVal="vector" descr="Returns a vector the rotation axis represented by rot.

Use in conjunction with llRot2Angle. To undo use llAxisAngle2Rot.">
				<Param name="rotation rot" />
			</Overload>
		</KeyWord>

		<KeyWord name="llRot2Euler" func="yes">
			<Overload retVal="vector" descr="Returns a vector that is the Euler representation (roll, pitch,
yaw) of rot.">
				<Param name="rotation rot" />
			</Overload>
		</KeyWord>

		<KeyWord name="llRot2Fwd" func="yes">
			<Overload retVal="vector" descr="Computes the orientation of the local x-axis relative to the
earth.

Returns a vector that is the forward vector defined by q, i.e. a unit vector
pointing in the local positive X direction.

Can be useful to identify the orientation of the local frontal-plane of the
prim, since it's x-axis is always perpendicular to this local frontal plane.">
				<Param name="rotation q" />
			</Overload>
		</KeyWord>

		<KeyWord name="llRot2Left" func="yes">
			<Overload retVal="vector" descr="Computes the orientation of the local y-axis relative to the
earth.

Returns a vector that is the left vector defined by q, i.e. a unit vector pointing
in the local positive Y direction.

Can be useful to identify the orientation of the local sagittal-plane of the prim,
since it's y-axis is always perpendicular to this local sagittal-plane.">
				<Param name="rotation q" />
			</Overload>
		</KeyWord>

		<KeyWord name="llRot2Up" func="yes">
			<Overload retVal="vector" descr="Computes the orientation of the local z-axis relative to the
earth.

Returns a vector that is the up vector defined by q, i.e. a unit vector pointing
in the positive Z direction.

Can be useful to identify the orientation of the local horizontal-plane of the
prim, since it's z-axis is always perpendicular to this local horizontal plane.">
				<Param name="rotation q" />
			</Overload>
		</KeyWord>

		<KeyWord name="llRotBetween" func="yes">
			<Overload retVal="rotation" descr="Returns a rotation that is the shortest rotation between the
direction start and the direction end.">
				<Param name="vector start" />
				<Param name="vector end" />
			</Overload>
		</KeyWord>

		<KeyWord name="llRotLookAt" func="yes">
			<Overload retVal="void" descr="Causes an object to smoothly rotate to target_direction with
strength resistance at damping force. Maintains rotation target_direction until
stopped with llStopLookAt.

To change the position in the same manner, use llMoveToTarget. For physical
objects a range between .2 and 1 is good for both parameters.">
				<Param name="rotation target_direction" />
				<Param name="float strength" />
				<Param name="float dampening" />
			</Overload>
		</KeyWord>

		<KeyWord name="llRotTarget" func="yes">
			<Overload retVal="integer" descr="This function is to have the script know when it has reached a
rotation. It registers a rot with a error that triggers at_rot_target and
not_at_rot_target events continuously until unregistered. Returns an integer
that is the handle to unregister the target with llRotTargetRemove.

A similar function exists for positions: llTarget.
This function does not rotate the object, to do that use llSetRot, llRotLookAt
or llLookAt.">
				<Param name="rotation rot" />
				<Param name="float error" />
			</Overload>
		</KeyWord>

		<KeyWord name="llRotTargetRemove" func="yes">
			<Overload retVal="void" descr="Removes rotational target handle registered with llRotTarget.">
				<Param name="integer handle" />
			</Overload>
		</KeyWord>

		<KeyWord name="llRotateTexture" func="yes">
			<Overload retVal="void" descr="Sets the texture rotation of the chosen face to angle.

If face is ALL_SIDES then the function works on all sides.">
				<Param name="float angle" />
				<Param name="integer face" />
			</Overload>
		</KeyWord>

		<KeyWord name="llRound" func="yes">
			<Overload retVal="integer" descr="Returns the integer that val is closest to.

If the absolute value of the tenths position is 4 or less, val is rounded off;
otherwise, val is rounded towards infinity of like signedness of val.">
				<Param name="float val" />
			</Overload>
		</KeyWord>

		<KeyWord name="llSHA1String" func="yes">
			<Overload retVal="string" descr="Returns a string of 40 hex characters that is the SHA-1 security
hash of src.">
				<Param name="string src" />
			</Overload>
		</KeyWord>

		<KeyWord name="llSHA256String" func="yes">
			<Overload retVal="string" descr="Returns a string of 64 hex characters that is the SHA-256
security hash of src.">
				<Param name="string src" />
			</Overload>
		</KeyWord>

		<KeyWord name="llSameGroup" func="yes">
			<Overload retVal="boolean" descr="Returns an integer boolean, that is TRUE if id has the same
active group, otherwise FALSE.

Also returns TRUE if the object is deeded to the same active group as id. Also
returns TRUE if the object is 'set to' or deeded to the same group as
group UUID (i.e. key OBJECT_GROUP).">
				<Param name="key id" />
			</Overload>
		</KeyWord>

		<KeyWord name="llSay" func="yes">
			<Overload retVal="void" descr="Says the text supplied in string message on channel supplied in
integer channel.">
				<Param name="integer channel" />
				<Param name="string message" />
			</Overload>
		</KeyWord>

		<KeyWord name="llScaleByFactor" func="yes">
			<Overload retVal="integer" descr="Attempts to resize the entire object by scaling_factor,
maintaining the size-position ratios of the prims.

Resizing is subject to prim scale limits and linkability limits. This function
can not resize the object if the linkset is physical, a pathfinding character,
in a keyframed motion, or if resizing would cause the parcel to overflow.

Returns an integer boolean TRUE if it succeeds, FALSE if it fails.">
				<Param name="float scaling_factor" />
			</Overload>
		</KeyWord>

		<KeyWord name="llScaleTexture" func="yes">
			<Overload retVal="void" descr="Sets the texture u &amp; v scales for the chosen face.

If face is ALL_SIDES then the function works on all sides.">
				<Param name="float u" />
				<Param name="float v" />
				<Param name="integer face" />
			</Overload>
		</KeyWord>

		<KeyWord name="llSay" func="yes">
			<Overload retVal="void" descr="Says the text supplied in string message on channel supplied in
integer channel.">
				<Param name="integer channel" />
				<Param name="string message" />
			</Overload>
		</KeyWord>

		<KeyWord name="llScaleByFactor" func="yes">
			<Overload retVal="integer" descr="Attempts to resize the entire object by scaling_factor,
maintaining the size-position ratios of the prims.

Resizing is subject to prim scale limits and linkability limits. This function
can not resize the object if the linkset is physical, a pathfinding character,
in a keyframed motion, or if resizing would cause the parcel to overflow.

Returns an integer boolean TRUE if it succeeds, FALSE if it fails.">
				<Param name="float scaling_factor" />
			</Overload>
		</KeyWord>

		<KeyWord name="llScaleTexture" func="yes">
			<Overload retVal="void" descr="Sets the texture u &amp; v scales for the chosen face.

If face is ALL_SIDES then the function works on all sides.">
				<Param name="float u" />
				<Param name="float v" />
				<Param name="integer face" />
			</Overload>
		</KeyWord>

		<KeyWord name="llScriptDanger" func="yes">
			<Overload retVal="boolean" descr="Returns an integer boolean, that is TRUE if pos is over public
land, sandbox land, land that doesn't allow everyone to edit and build, or
land that doesn't allow outside scripts.

The usefulness of this function is limited as it does not give the reason why
the script would be in danger. llGetParcelFlags on the other hand can be used in
much the same way and gives more detailed information.">
				<Param name="vector pos" />
			</Overload>
		</KeyWord>

		<KeyWord name="llScriptProfiler" func="yes">
			<Overload retVal="void" descr="Enables or disables the script's profiling state.">
				<Param name="integer flags" />
			</Overload>
		</KeyWord>

		<KeyWord name="llSendRemoteData" func="yes">
			<Overload retVal="key" descr="Send an XML-RPC request to dest through channel with payload of
channel (in a string), integer idata and string sdata.

Returns a key that is the message_id for the resulting remote_data events.">
				<Param name="key channel" />
				<Param name="string dest" />
				<Param name="integer idata" />
				<Param name="string sdata" />
			</Overload>
		</KeyWord>

		<KeyWord name="llSensor" func="yes">
			<Overload retVal="void" descr="Performs a single scan for name and id with type within radius
meters and arc radians of forward vector. Script execution continues
immediately. When the scan is completed, a sensor or no_sensor event is put in
the event queue.

* string name: object or avatar name
* key id: group, avatar or object UUID that is in the same region
* integer type: mask (AGENT, AGENT_BY_LEGACY_NAME, AGENT_BY_USERNAME, ACTIVE,
PASSIVE, and/or SCRIPTED)
* float radius: distance in meters from center, [0.0, 96.0]
* float arc: the max angle between the object's local X-axis
and detectable objects, [0.0, PI]">
				<Param name="string name" />
				<Param name="key id" />
				<Param name="integer type" />
				<Param name="float range" />
				<Param name="float arc" />
			</Overload>
		</KeyWord>

		<KeyWord name="llSensorRemove" func="yes">
			<Overload retVal="void" descr="Removes the sensor setup by llSensorRepeat.

There are no parameters or return value for this function, as only one
llSensorRepeat can be specified per script." />
		</KeyWord>

		<KeyWord name="llSensorRepeat" func="yes">
			<Overload retVal="void" descr="Performs a single scan for name and id with type within range
meters and arc radians of forward vector and repeats every rate seconds. It does
not perform the first scan until rate seconds have passed.

If name, id, and/or type are empty or 0, they are ignored.
If id is an invalid key or NULL_KEY it is treated as empty.
Depending upon which AGENT* flag is used determines the format requirements for
name.

Please remember that the AGENT constant is deprecated, use AGENT_BY_LEGACY_NAME
instead.">
				<Param name="string name" />
				<Param name="key id" />
				<Param name="integer type" />
				<Param name="float range" />
				<Param name="float arc" />
				<Param name="float rate" />
			</Overload>
		</KeyWord>

		<KeyWord name="llSetAgentEnvironment" func="yes">
			<Overload retVal="void" descr="This function sets environment values for an individual agent in an
experience.

The changes to the environment persist until the agent moves to a new region or
llSetAgentEnvironment is called for an agent with an empty list.

Passing an empty list in params will strip all environmental settings applied to
this agent as part of the experience.">
				<Param name="key agent_id" />
				<Param name="float transition" />
				<Param name="list params" />
			</Overload>
		</KeyWord>

		<KeyWord name="llSetAlpha" func="yes">
			<Overload retVal="void" descr="Sets the alpha on face

If face is ALL_SIDES then the function works on all sides.">
				<Param name="float alpha" />
				<Param name="integer face" />
			</Overload>
		</KeyWord>

		<KeyWord name="llSetAngularVelocity" func="yes">
			<Overload retVal="void" descr="Applies rotational velocity to object.">
				<Param name="vector force" />
				<Param name="boolean local" />
			</Overload>
		</KeyWord>

		<KeyWord name="llSetAnimationOverride" func="yes">
			<Overload retVal="void" descr="Set the animation (anim) that will play for the given animation
state (anim_state).

* string anim_state: Animation state to be overriden
* string anim: An animation in the prim's inventory or the name of a built-in
animation

To run this function the script must request the PERMISSION_OVERRIDE_ANIMATIONS
permission with llRequestPermissions. Note: Animation overrides survive script
reset/removal but not relog.">
				<Param name="string anim_state" />
				<Param name="string anim" />
			</Overload>
		</KeyWord>

		<KeyWord name="llSetBuoyancy" func="yes">
			<Overload retVal="void" descr="Sets the buoyancy of the task or object. Requires physics to be
enabled.

if (buoyancy == 0.0) disables
if (buoyancy &lt; 1.0) sinks
if (buoyancy == 1.0) floats
if (buoyancy &gt; 1.0) rises">
				<Param name="float buoyancy" />
			</Overload>
		</KeyWord>

		<KeyWord name="llSetCameraAtOffset" func="yes">
			<Overload retVal="void" descr="Sets the point the camera is looking at to offset for avatars that
sit on the object.

This is the point the camera looks at, not the position of the camera's eye.">
				<Param name="vector offset" />
			</Overload>
		</KeyWord>

		<KeyWord name="llSetCameraEyeOffset" func="yes">
			<Overload retVal="void" descr="Sets the camera eye offset for avatars that sit on the object.

This is the position of the camera's eye, not the point it looks at.">
				<Param name="vector offset" />
			</Overload>
		</KeyWord>

		<KeyWord name="llSetCameraParams" func="yes">
			<Overload retVal="void" descr="Sets multiple camera parameters at once.

To run this function the script must request the PERMISSION_CONTROL_CAMERA
permission with llRequestPermissions.">
				<Param name="list rules" />
			</Overload>
		</KeyWord>

		<KeyWord name="llSetClickAction" func="yes">
			<Overload retVal="void" descr="Sets the action performed when a prim is clicked upon (aka click
action).

When the cursor hovers over the prim, its image changes to reflect the action.">
				<Param name="integer action" />
			</Overload>
		</KeyWord>

		<KeyWord name="llSetColor" func="yes">
			<Overload retVal="void" descr="Sets the color on face of the prim.

If face is ALL_SIDES then the function works on all sides.">
				<Param name="vector color" />
				<Param name="integer face" />
			</Overload>
		</KeyWord>

		<KeyWord name="llSetContentType" func="yes">
			<Overload retVal="void" descr="Set the Internet media type of an LSL HTTP server response.">
				<Param name="key request_id" />
				<Param name="integer content_type" />
			</Overload>
		</KeyWord>

		<KeyWord name="llSetDamage" func="yes">
			<Overload retVal="void" descr="Sets the amount of damage that will be done when this object hits
an avatar.">
				<Param name="float damage" />
			</Overload>
		</KeyWord>

		<KeyWord name="llSetEnvironment" func="yes">
			<Overload retVal="integer" descr="This function overrides the environmental settings for a region
or a parcel.

The owner of the script must have permission to modify the environment on the
parcel or be an estate manager to change the entire region.

An override for a given parameter can be set at the region scope or parcel
scope.
It can also be set for a single sky track, all sky tracks, or both. If an
override of a given parameter is specified for both an individual track and all
tracks, the individual track's override takes priority.

Note that the list of valid parameters differs from those available for
llGetEnvironment.

Returns an Integer.

* vector position: The location on the region of the parcel to be changed.
Use &lt;-1, -1, z&gt; for the entire region. The z-component specifies which sky
track to change, based on elevation. Use z=-1 to set an override on the special
'all tracks' slot.
* list params: A list of parameters to change for the parcel or region.
Passing an empty list will remove any modifications from previous calls to
llSetEnvironment.">
				<Param name="vector position" />
				<Param name="list params" />
			</Overload>
		</KeyWord>

		<KeyWord name="llSetForce" func="yes">
			<Overload retVal="void" descr="Applies force to the object (if the script is physical).

Continuous force. llApplyImpulse has instantaneous push.">
				<Param name="vector force" />
				<Param name="boolean local" />
			</Overload>
		</KeyWord>

		<KeyWord name="llSetForceAndTorque" func="yes">
			<Overload retVal="void" descr="Sets the force and torque of object (if the script is physical).">
				<Param name="vector force" />
				<Param name="vector torque" />
				<Param name="boolean local" />
			</Overload>
		</KeyWord>

		<KeyWord name="llSetHoverHeight" func="yes">
			<Overload retVal="void" descr="Critically damps to a height above the ground (or water) in tau
seconds.

Do not use with vehicles. Use llStopHover to stop hovering.">
				<Param name="float height" />
				<Param name="boolean water" />
				<Param name="float tau" />
			</Overload>
		</KeyWord>

		<KeyWord name="llSetKeyframedMotion" func="yes">
			<Overload retVal="void" descr="Specify a list of times, positions, and orientations to be followed
by an object.

The object will be smoothly moved between keyframes by the simulator. Collisions
with other nonphysical or keyframed objects will be ignored (no script events
will fire and collision processing will not occur). Collisions with physical
objects will be computed and reported, but the keyframed object will be
unaffected by those collisions. (The physical object will be affected, however.)">
				<Param name="list keyframes" />
				<Param name="list options" />
			</Overload>
		</KeyWord>

		<KeyWord name="llSetLinkAlpha" func="yes">
			<Overload retVal="void" descr="If a prim exists in the link set at link, set alpha on face of that
prim.

If face is ALL_SIDES then the function works on all sides.">
				<Param name="integer link" />
				<Param name="float alpha" />
				<Param name="integer face" />
			</Overload>
		</KeyWord>

		<KeyWord name="llSetLinkCamera" func="yes">
			<Overload retVal="void" descr="Sets the camera eye offset, and the offset that camera is looking
at, for avatars that sit on the linked prim.">
				<Param name="integer link" />
				<Param name="vector eye" />
				<Param name="vector at" />
			</Overload>
		</KeyWord>

		<KeyWord name="llSetLinkColor" func="yes">
			<Overload retVal="void" descr="If a prim exists in the link set at link, set color on face of that
prim.

If face is ALL_SIDES then the function works on all sides.">
				<Param name="integer link" />
				<Param name="vector color" />
				<Param name="integer face" />
			</Overload>
		</KeyWord>

		<KeyWord name="llSetLinkMedia" func="yes">
			<Overload retVal="integer" descr="Set the media params for a particular face on the linked prim(s)
without a delay.

Returns an integer that is a STATUS_* flag which details the success/failure of
the operation(s).">
				<Param name="integer link" />
				<Param name="integer face" />
				<Param name="list params" />
			</Overload>
		</KeyWord>

		<KeyWord name="llSetLinkPrimitiveParams" func="yes">
			<Overload retVal="void" descr="Set primitive parameters for link based on rules. You may prefer to
use llSetLinkPrimitiveParamsFast which behaves identically except does not sleep
the script.">
				<Param name="integer link" />
				<Param name="list rules" />
			</Overload>
		</KeyWord>

		<KeyWord name="llSetLinkPrimitiveParamsFast" func="yes">
			<Overload retVal="void" descr="Set primitive parameters for link based on rules with no built-in
script sleep.

This function is identical to llSetLinkPrimitiveParams except without the delay.">
				<Param name="integer link" />
				<Param name="list rules" />
			</Overload>
		</KeyWord>

		<KeyWord name="llSetLinkRenderMaterial" func="yes">
			<Overload retVal="void" descr="If a prim exists in the link set at link, set material on face
of that prim. This function will clear most PRIM_GLTF_* properties on the face,
with the exceptions of repeats, offsets, and rotation_in_radians.

* integer link: Link number (0: unlinked, 1: root prim, &gt;1: child prims and
seated avatars) or a LINK_* flag
* string material: A material in the inventory of the prim this script is in or
a UUID of a material
* integer face: Face number or ALL_SIDES

If face is ALL_SIDES then the function works on all sides.">
				<Param name="integer link" />
				<Param name="string material" />
				<Param name="integer face" />
			</Overload>
		</KeyWord>

		<KeyWord name="llSetLinkSitFlags" func="yes">
			<Overload retVal="void" descr="Sets flags on the link's sit target.

* integer link: Link number (0: unlinked, 1: root prim, &gt;1: child prims and
seated avatars) or a LINK_* flag The link ID
* integer flags: Flags to set">
				<Param name="integer link" />
				<Param name="integer flags" />
			</Overload>
		</KeyWord>

		<KeyWord name="llSetLinkTexture" func="yes">
			<Overload retVal="void" descr="If a prim exists in the link set at link, set texture on face of
that prim.

If face is ALL_SIDES then the function works on all sides.">
				<Param name="integer link" />
				<Param name="string texture" />
				<Param name="integer face" />
			</Overload>
		</KeyWord>

		<KeyWord name="llSetLinkTextureAnim" func="yes">
			<Overload retVal="void" descr="Animate the texture on the specified face/faces of the specified
prim/prims by setting the texture scale and offset. Identical to
llSetTextureAnim except able to modify any prim in the link set.

If face is ALL_SIDES then the function works on all sides. start supports
negative indexes. Frames are numbered from left to right, top to bottom,
starting at 0. If rate is negative, it has the same effect as using the REVERSE
flag.">
				<Param name="integer link" />
				<Param name="integer mode" />
				<Param name="integer face" />
				<Param name="integer size_x" />
				<Param name="integer size_y" />
				<Param name="float start" />
				<Param name="float length" />
				<Param name="float rate" />
			</Overload>
		</KeyWord>

		<KeyWord name="llSetLocalRot" func="yes">
			<Overload retVal="void" descr="Sets the rotation of a child prim relative to the root prim.">
				<Param name="rotation rot" />
			</Overload>
		</KeyWord>

		<KeyWord name="llSetMemoryLimit" func="yes">
			<Overload retVal="boolean" descr="Request limit bytes to be reserved for this script.

Returns a boolean indicating if the memory limit was set.">
				<Param name="integer limit" />
			</Overload>
		</KeyWord>

		<KeyWord name="llSetObjectDesc" func="yes">
			<Overload retVal="void" descr="Sets the prim's description.

If this function is called from a child prim in a linked set, it will change the
description of the child prim and not the root prim.">
				<Param name="string desc" />
			</Overload>
		</KeyWord>

		<KeyWord name="llSetObjectName" func="yes">
			<Overload retVal="void" descr="Sets the prim's name.

If this function is called from a child prim in a linked set, it will change the
name of the child prim and not the root prim.">
				<Param name="string name" />
			</Overload>
		</KeyWord>

		<KeyWord name="llSetParcelMusicURL" func="yes">
			<Overload retVal="void" descr="Sets the streaming audio URL for the parcel object is on

The object owner must also be the land owner. If the land is deeded to a group
the object will need to be deeded to the same group for this function to work.">
				<Param name="string url" />
			</Overload>
		</KeyWord>

		<KeyWord name="llSetPayPrice" func="yes">
			<Overload retVal="void" descr="Suggest default amounts for the pay text field and pay buttons of
the appearing dialog when someone chooses to pay this object.">
				<Param name="integer price" />
				<Param name="list quick_pay_buttons" />
			</Overload>
		</KeyWord>

		<KeyWord name="llSetPhysicsMaterial" func="yes">
			<Overload retVal="void" descr="Used to set the physical characteristics of an object.

* float mask: bitwise combination of DENSITY, FRICTION, RESTITUTION, and
GRAVITY_MULTIPLIER and specifies which floats to actually apply.
* float gravity_multiplier: range [-1.0, +28.0], default: 1.0
* float restitution: range [0.0, 1.0], default: [0.3, 0.9]
* float friction: range [0.0, 255.0], default: [0.2, 0.9]
* float density: range [1.0, 22587.0] kg/m^3, default: 1000.0

The default values for friction and restitution depend upon the material type.">
				<Param name="integer mask" />
				<Param name="float gravity_multiplier" />
				<Param name="float restitution" />
				<Param name="float friction" />
				<Param name="float density" />
			</Overload>
		</KeyWord>

		<KeyWord name="llSetPos" func="yes">
			<Overload retVal="void" descr="Moves the object or primitive towards pos without using physics.

Position in region or local coordinates depending upon the situation. Movement
is capped to 10m per call for unattached root prims.">
				<Param name="vector pos" />
			</Overload>
		</KeyWord>

		<KeyWord name="llSetPrimMediaParams" func="yes">
			<Overload retVal="integer" descr="Set the media params for a particular face.

Returns an integer that is a STATUS_* flag which details the success/failure of
the operation(s).">
				<Param name="integer face" />
				<Param name="list params" />
			</Overload>
		</KeyWord>

		<KeyWord name="llSetPrimitiveParams" func="yes">
			<Overload retVal="void" descr="Sets the prim's parameters according to rules.">
				<Param name="list rules" />
			</Overload>
		</KeyWord>

		<KeyWord name="llSetRegionPos" func="yes">
			<Overload retVal="boolean" descr="Tries to move the entire object so that the root prim is within
0.1m of position.

Returns a boolean, TRUE if the object is successfully placed within 0.1 m of
position, FALSE otherwise.">
				<Param name="vector position" />
			</Overload>
		</KeyWord>

		<KeyWord name="llSetRemoteScriptAccessPin" func="yes">
			<Overload retVal="void" descr="Allows a prim to have scripts remotely loaded via
llRemoteLoadScriptPin when it is passed the correct pin and the prim is set mod.

Set pin to FALSE (0) to disable remote script load abilities. Every other non-zero
value enables them.">
				<Param name="integer pin" />
			</Overload>
		</KeyWord>

		<KeyWord name="llSetRenderMaterial" func="yes">
			<Overload retVal="void" descr="Sets the material of this prim's face. This function will clear
most PRIM_GLTF_* properties on the face, with the exceptions of repeats,
offsets, and rotation_in_radians.

* string material: A material in the inventory of the prim this script is in or
a UUID of a material
* integer face: face number or ALL_SIDES

If face is ALL_SIDES then the function works on all sides.">
				<Param name="string material" />
				<Param name="integer face" />
			</Overload>
		</KeyWord>

		<KeyWord name="llSetRot" func="yes">
			<Overload retVal="void" descr="Sets the rotation of the prim to rot.">
				<Param name="rotation rot" />
			</Overload>
		</KeyWord>

		<KeyWord name="llSetScale" func="yes">
			<Overload retVal="void" descr="Sets the size of the prim according to size

The components of size (x, y &amp; z) each need to be in the range [0.01, 64.0],
if they are out of the range they are rounded to the nearest endpoint.">
				<Param name="vector size" />
			</Overload>
		</KeyWord>

		<KeyWord name="llSetScriptState" func="yes">
			<Overload retVal="void" descr="Set the running state of the script name.">
				<Param name="string name" />
				<Param name="boolean run" />
			</Overload>
		</KeyWord>

		<KeyWord name="llSetSitText" func="yes">
			<Overload retVal="void" descr="Displays text rather than the default 'Sit Here' in the
right-click menu.

To restore the default value, use an empty string for text. To make it appear as
if there is no text, use some combination of whitespace characters for text.

Text is limited to 9 characters.">
				<Param name="string text" />
			</Overload>
		</KeyWord>

		<KeyWord name="llSetSoundQueueing" func="yes">
			<Overload retVal="void" descr="Set whether attached sounds wait for the current sound to finish.

Sound queuing is disabled by default.">
				<Param name="boolean queue" />
			</Overload>
		</KeyWord>

		<KeyWord name="llSetSoundRadius" func="yes">
			<Overload retVal="void" descr="Establishes a hard cut-off radius for audibility of scripted sounds
(both attached and triggered).">
				<Param name="float radius" />
			</Overload>
		</KeyWord>

		<KeyWord name="llSetStatus" func="yes">
			<Overload retVal="void" descr="Sets the object status attributes indicated in the status mask to
value.">
				<Param name="integer status" />
				<Param name="boolean value" />
			</Overload>
		</KeyWord>

		<KeyWord name="llSetText" func="yes">
			<Overload retVal="void" descr="Displays text that hovers over the prim with specific color and
translucency (specified with alpha).">
				<Param name="string text" />
				<Param name="vector color" />
				<Param name="float alpha" />
			</Overload>
		</KeyWord>

		<KeyWord name="llSetTexture" func="yes">
			<Overload retVal="void" descr="Sets the texture of this prim's face.

If face is ALL_SIDES then the function works on all sides.">
				<Param name="string texture" />
				<Param name="integer face" />
			</Overload>
		</KeyWord>

		<KeyWord name="llSetTextureAnim" func="yes">
			<Overload retVal="void" descr="Animate the texture on the specified face/faces by setting the
texture scale and offset.

If face is ALL_SIDES then the function works on all sides. start supports
negative indexes. Frames are numbered from left to right, top to bottom,
starting at 0. If rate is negative, it has the same effect as using the REVERSE
flag."> 
				<Param name="integer mode" />
				<Param name="integer face" />
				<Param name="integer size_x" />
				<Param name="integer size_y" />
				<Param name="float start" />
				<Param name="float length" />
				<Param name="float rate" />
			</Overload>
		</KeyWord>

		<KeyWord name="llSetTimerEvent" func="yes">
			<Overload retVal="void" descr="Cause the timer event to be triggered a maximum of once every x
seconds.

Passing in 0.0 stops further timer events.">
				<Param name="float sec" />
			</Overload>
		</KeyWord>

		<KeyWord name="llSetTorque" func="yes">
			<Overload retVal="void" descr="Sets the torque of object (if the script is physical).">
				<Param name="vector torque" />
				<Param name="boolean local" />
			</Overload>
		</KeyWord>

		<KeyWord name="llSetTouchText" func="yes">
			<Overload retVal="void" descr="Displays text rather than the default 'Touch' in the
right-click menu.

To restore the default value, use an empty string for text. To make it appear as
if there is no text, use some combination of whitespace characters for text.

Text is limited to 9 characters.">
				<Param name="string text" />
			</Overload>
		</KeyWord>

		<KeyWord name="llSetVehicleFlags" func="yes">
			<Overload retVal="void" descr="Sets the enabled bits in flags.">
				<Param name="integer flags" />
			</Overload>
		</KeyWord>

		<KeyWord name="llSetVehicleFloatParam" func="yes">
			<Overload retVal="void" descr="Sets the vehicle float parameter param to value.">
				<Param name="integer param" />
				<Param name="float value" />
			</Overload>
		</KeyWord>

		<KeyWord name="llSetVehicleRotationParam" func="yes">
			<Overload retVal="void" descr="Sets the vehicle rotation parameter param to rot.">
				<Param name="integer param" />
				<Param name="rotation rot" />
			</Overload>
		</KeyWord>

		<KeyWord name="llSetVehicleType" func="yes">
			<Overload retVal="void" descr="Sets the vehicle type to one of the default types.">
				<Param name="integer type" />
			</Overload>
		</KeyWord>

		<KeyWord name="llSetVehicleVectorParam" func="yes">
			<Overload retVal="void" descr="Sets the vehicle vector parameter param to vec.">
				<Param name="integer param" />
				<Param name="vector vec" />
			</Overload>
		</KeyWord>

		<KeyWord name="llSetVelocity" func="yes">
			<Overload retVal="void" descr="Applies velocity to object.

Instantaneous velocity not dependent on object energy or mass. llSetForce has
continuous push.">
				<Param name="vector force" />
				<Param name="boolean local" />
			</Overload>
		</KeyWord>

		<KeyWord name="llShout" func="yes">
			<Overload retVal="void" descr="Shouts the text supplied in message on channel.">
				<Param name="integer channel" />
				<Param name="string message" />
			</Overload>
		</KeyWord>

		<KeyWord name="llSignRSA" func="yes">
			<Overload retVal="string" descr="Returns a string that is the Base64-encoded RSA signature of msg
when using hash algorithm algorithm and secret key private_key. Can be paired
with llVerifyRSA to pass verifiable messages.

This function supports sha1, sha224, sha256, sha384, sha512 for algorithm.">
				<Param name="string private_key" />
				<Param name="string msg" />
				<Param name="string algorithm" />
			</Overload>
		</KeyWord>

		<KeyWord name="llSin" func="yes">
			<Overload retVal="float" descr="Returns a float that is the sine of theta.">
				<Param name="float theta" />
			</Overload>
		</KeyWord>

		<KeyWord name="llSitOnLink" func="yes">
			<Overload retVal="integer" descr="The avatar specified by agent_id is forced to sit on the sit
target of the prim indicated by the link parameter. If the specified link is
already occupied, the simulator searches down the chain of prims in the link set
looking for an available sit target.

Returns an Integer.

* key agent_id: UUID of the avatar being forced to sit
* integer link: Link number for the prim containing the desired sit target

If successful, this method returns 1.

If the function fails, it returns a negative number constant.

Link constants that indicate a single prim may be used for the link parameter.
These are LINK_ROOT and LINK_THIS. Other constants such as LINK_SET,
LINK_CHILDREN, LINK_ALL_OTHERS will return an INVALID_LINK error.

This method must be called from an experience enabled script running on land that
has enabled the experience key. If these conditions are not met this method
returns a NOT_EXPERIENCE error.

The targeted avatar must also have accepted the experience. If the user is not
participating in the experience this method returns NO_EXPERIENCE_PERMISSION.
If the avatar id can not be found or is not over land that has enabled the
experience this method returns INVALID_AGENT.

If there are no valid sit targets remaining in the linkset this method returns
NO_SIT_TARGET and no action is taken with the avatar.

If the avatar does not have access to the parcel containing the prim running this
script, this call fails.">
				<Param name="key agent_id" />
				<Param name="integer link" />
			</Overload>
		</KeyWord>

		<KeyWord name="llSitTarget" func="yes">
			<Overload retVal="void" descr="Set the sit location for the prim. The sit location is relative to
the prim's position and rotation.

If offset is ZERO_VECTOR (&lt;0.0, 0.0, 0.0&gt;) then the sit target is removed.
You can set rot to ZERO_ROTATION (&lt;0.0, 0.0, 0.0, 1.0&gt;) at any offset if
so desired.">
				<Param name="vector offset" />
				<Param name="rotation rot" />
			</Overload>
		</KeyWord>

		<KeyWord name="llSleep" func="yes">
			<Overload retVal="void" descr="Puts the script to sleep for sec seconds. The script will not do
anything during this time.">
				<Param name="float sec" />
			</Overload>
		</KeyWord>

		<KeyWord name="llSqrt" func="yes">
			<Overload retVal="float" descr="Returns a float that is the square root of val.

Triggers a Math Error for imaginary results (val &lt; 0.0).">
				<Param name="float val" />
			</Overload>
		</KeyWord>

		<KeyWord name="llStartAnimation" func="yes">
			<Overload retVal="void" descr="Start animation anim for agent that granted
PERMISSION_TRIGGER_ANIMATION if the permission has not been revoked.

To run this function the script must request the PERMISSION_TRIGGER_ANIMATION
permission with llRequestPermissions.">
				<Param name="string anim" />
			</Overload>
		</KeyWord>

		<KeyWord name="llStopAnimation" func="yes">
			<Overload retVal="void" descr="Stop animation anim for agent that granted
PERMISSION_TRIGGER_ANIMATION if the permission has not been revoked.

To run this function the script must request the PERMISSION_TRIGGER_ANIMATION
permission with llRequestPermissions.">
				<Param name="string anim" />
			</Overload>
		</KeyWord>

		<KeyWord name="llStopHover" func="yes">
			<Overload retVal="void" descr="Stop hovering to a height." />
		</KeyWord>

		<KeyWord name="llStopLookAt" func="yes">
			<Overload retVal="void" descr="Stop causing object to point at a target. Use in conjunction
llLookAt or llRotLookAt." />
		</KeyWord>

		<KeyWord name="llStopMoveToTarget" func="yes">
			<Overload retVal="void" descr="Stops critically damped motion. Use in conjunction with
llMoveToTarget. To stop rotation movement use llStopLookAt." />
		</KeyWord>

		<KeyWord name="llStopSound" func="yes">
			<Overload retVal="void" descr="Stops the attached sound(s) currently playing, if they were started
by llLoopSound." />
		</KeyWord>

		<KeyWord name="llStringLength" func="yes">
			<Overload retVal="integer" descr="Returns an integer that is the number of characters in str (not
counting the null).">
				<Param name="string str" />
			</Overload>
		</KeyWord>

		<KeyWord name="llStringToBase64" func="yes">
			<Overload retVal="string" descr="Returns a string that is the Base64 representation of the str.

To go in the other direction, use llBase64ToString.">
				<Param name="string str" />
			</Overload>
		</KeyWord>

		<KeyWord name="llStringTrim" func="yes">
			<Overload retVal="string" descr="Returns a string that is src with leading and/or trailing white
space (spaces, tabs, EOF and line feeds) trimmed from it.">
				<Param name="string src" />
				<Param name="integer type" />
			</Overload>
		</KeyWord>

		<KeyWord name="llSubStringIndex" func="yes">
			<Overload retVal="integer" descr="Returns an integer that is the zero-based index of the first
instance of pattern in source.

If pattern is not found in source, -1 is returned.">
				<Param name="string source" />
				<Param name="string pattern" />
			</Overload>
		</KeyWord>

		<KeyWord name="llTakeControls" func="yes">
			<Overload retVal="void" descr="Allows for intercepting of keyboard and mouse clicks, specifically
those specified by controls, from the agent the script has permissions for.

To run this function the script must request the PERMISSION_TAKE_CONTROLS
permission with llRequestPermissions. If accept is FALSE and pass_on is FALSE,
the behavior is not intuitive. In this case, the complement of the specified
controls do not generate events and do not perform their normal functions.
They are effectively disabled. Certain control bits (e.g. CONTROL_ROT_LEFT)
are also disabled when specified, in this case.

If accept is FALSE and pass_on is TRUE, then the specified controls do not
generate events but perform their normal functions.
If accept is TRUE and pass_on is FALSE, then the specified controls generate
events but do not perform their normal functions.
If accept is TRUE and pass_on is TRUE, then the specified controls generate
events and perform their normal functions.">
				<Param name="integer controls" />
				<Param name="integer accept" />
				<Param name="integer pass_on" />
			</Overload>
		</KeyWord>

		<KeyWord name="llTan" func="yes">
			<Overload retVal="float" descr="Returns a float that is the tangent of theta.">
				<Param name="float theta" />
			</Overload>
		</KeyWord>

		<KeyWord name="llTarget" func="yes">
			<Overload retVal="integer" descr="This function is to have the script know when it has reached a
position. It registers a position with a range that triggers at_target and
not_at_target events continuously until unregistered.

Returns an integer that is the handle to unregister the target with
llTargetRemove.

A similar function exists for rotations: llRotTarget.

This function does not move the object, to do that use llSetPos, llSetRegionPos
or llMoveToTarget.">
				<Param name="vector position" />
				<Param name="float range" />
			</Overload>
		</KeyWord>

		<KeyWord name="llTargetOmega" func="yes">
			<Overload retVal="void" descr="Rotates the object/prim around axis at a rate of spinrate *
llVecMag(axis) in radians per second with strength gain.

Set gain to zero (0.0) to disable the rotation.">
				<Param name="vector axis" />
				<Param name="float spinrate" />
				<Param name="float gain" />
			</Overload>
		</KeyWord>

		<KeyWord name="llTargetRemove" func="yes">
			<Overload retVal="void" descr="Removes positional target handle registered with llTarget.">
				<Param name="integer handle" />
			</Overload>
		</KeyWord>

		<KeyWord name="llTargetedEmail" func="yes">
			<Overload retVal="void" descr="Sends an email to the owner or creator (selected by target)
of an object with subject and message.

The entire message (including the address, subject and other miscellaneous
fields) can't be longer than 4096 bytes combined.

The target parameter selects which agent the email is sent to:
TARGETED_EMAIL_OBJECT_OWNER (2) Send email to the owner of the current object

The message is prefixed with information about the prim sending the email.">
				<Param name="integer target" />
				<Param name="string subject" />
				<Param name="string message" />
			</Overload>
		</KeyWord>

		<KeyWord name="llTeleportAgent" func="yes">
			<Overload retVal="void" descr="Requests a teleport of owner to a landmark stored in the object's
inventory.

If no landmark is provided (an empty string), the avatar is teleported to the
location position in the current region. In either case, the avatar is turned to
face the position given by look_at in local coordinates.

To run this function the script must request the PERMISSION_TELEPORT permission
with llRequestPermissions and it must be granted by owner.">
				<Param name="key owner" />
				<Param name="string landmark" />
				<Param name="vector position" />
				<Param name="vector look_at" />
			</Overload>
		</KeyWord>

		<KeyWord name="llTeleportAgentGlobalCoords" func="yes">
			<Overload retVal="void" descr="Teleports the owner to set of a region_coordinates within a region
at the specified global_coordinates. The owner lands facing the position define
by look_at local coordinates. A region's global coordinates can be retrieved
using llRequestSimulatorData(region_name, DATA_SIM_POS).

To run this function the script must request the PERMISSION_TELEPORT permission
with llRequestPermissions and it must be granted by the owner. The combination
of llRequestSimulatorData and llTeleportAgentGlobalCoords allows agents to be
teleported to regions by region name.">
				<Param name="key owner" />
				<Param name="vector global_coordinates" />
				<Param name="vector region_coordinates" />
				<Param name="vector look_at" />
			</Overload>
		</KeyWord>

		<KeyWord name="llTeleportAgentHome" func="yes">
			<Overload retVal="void" descr="Teleports avatar on owner's land to their home location without
any warning, similar to a God Summons or dying.

Generally, the object owner must also be the land owner but there is an
exception for land deeded to a group for group members with the 'Eject and
freeze Residents on parcels' ability.">
				<Param name="key avatar" />
			</Overload>
		</KeyWord>

		<KeyWord name="llTextBox" func="yes">
			<Overload retVal="void" descr="Shows a dialog box on avatar's screen with the text message.
It contains a text box for input, any text that is entered is said by avatar on
channel when the 'Submit' button is clicked.">
				<Param name="key avatar" />
				<Param name="string message" />
				<Param name="integer channel" />
			</Overload>
		</KeyWord>

		<KeyWord name="llToLower" func="yes">
			<Overload retVal="string" descr="Returns a string that is src with all lower-case letters.

The opposite is llToUpper.">
				<Param name="string src" />
			</Overload>
		</KeyWord>

		<KeyWord name="llToUpper" func="yes">
			<Overload retVal="string" descr="Returns a string that is src with all upper-case characters.

The opposite is llToLower.">
				<Param name="string src" />
			</Overload>
		</KeyWord>

		<KeyWord name="llTransferLindenDollars" func="yes">
			<Overload retVal="key" descr="Transfer positive amount of L$ money from script owner to
destination avatar.

Returns a key used in a matching transaction_result event for the success or
failure of the transfer. If the transaction is successful, this key will show
in the transaction history.

To run this function the script must request the PERMISSION_DEBIT permission
with llRequestPermissions and it must be granted by the owner. If you aren't
going to use the return value or the resulting transaction_result event consider
using llGiveMoney instead of this function.">
				<Param name="key destination" />
				<Param name="integer amount" />
			</Overload>
		</KeyWord>

		<KeyWord name="llTriggerSound" func="yes">
			<Overload retVal="void" descr="Plays sound at volume, centered at but not attached to object.

If the object moves the sound does not move with it.

Use llPlaySound to play a sound attached to the object.">
				<Param name="string sound" />
				<Param name="float volume" />
			</Overload>
		</KeyWord>

		<KeyWord name="llTriggerSoundLimited" func="yes">
			<Overload retVal="void" descr="Plays sound at volume, centered at but not attached to the object,
limited to the box defined by vectors top_north_east and bottom_south_west.

If the object moves the sound does not move with it.

Use llPlaySound to play a sound attached to the object.">
				<Param name="string sound" />
				<Param name="float volume" />
				<Param name="vector top_north_east" />
				<Param name="vector bottom_south_west" />
			</Overload>
		</KeyWord>

		<KeyWord name="llUnSit" func="yes">
			<Overload retVal="void" descr="If the agent identified by id is sitting on the object the script
is attached to or is over land owned by the object's owner, the agent is forced
to stand up.">
				<Param name="key id" />
			</Overload>
		</KeyWord>

		<KeyWord name="llUnescapeURL" func="yes">
			<Overload retVal="string" descr="Returns a string that is an unescaped/unencoded version of url,
replacing %20 with spaces etc.

This function is similar to functions found in many other languages.">
				<Param name="string url" />
			</Overload>
		</KeyWord>

		<KeyWord name="llUpdateCharacter" func="yes">
			<Overload retVal="void" descr="Updates settings for a character.">
				<Param name="list options" />
			</Overload>
		</KeyWord>

		<KeyWord name="llUpdateKeyValue" func="yes">
			<Overload retVal="key" descr="Start an asynchronous transaction to update a key-value pair
associated with the given experience key with the given key and value.

Returns a handle (a key) that can be used to identify the corresponding
dataserver event to determine if this command succeeded or failed and the
results.

If checked is set to TRUE then the update will only happen if original_value
matches the current value in key-value store. This can be used to create an
in-use flag so that Atomicity can be achieved.">
				<Param name="string k" />
				<Param name="string v" />
				<Param name="integer checked" />
				<Param name="string ov" />
			</Overload>
		</KeyWord>

		<KeyWord name="llVecDist" func="yes">
			<Overload retVal="float" descr="Returns a float that is the undirected nonnegative distance between
a and b.">
				<Param name="vector a" />
				<Param name="vector b" />
			</Overload>
		</KeyWord>

		<KeyWord name="llVecMag" func="yes">
			<Overload retVal="float" descr="Returns a float that is the magnitude of the vector (the
undirected non-negative distance from v to ZERO_VECTOR (&lt;0.0, 0.0, 0.0&gt;).">
				<Param name="vector v" />
			</Overload>
		</KeyWord>

		<KeyWord name="llVecNorm" func="yes">
			<Overload retVal="vector" descr="Returns the vector that is v normalized (a unit vector sharing
the same direction as vec).

If v is a ZERO_VECTOR (&lt;0.0, 0.0, 0.0&gt;), than the value returned is a
ZERO_VECTOR.">
				<Param name="vector v" />
			</Overload>
		</KeyWord>

		<KeyWord name="llVerifyRSA" func="yes">
			<Overload retVal="integer" descr="Returns an integer indicating whether the RSA signature is valid
for msg when using hash algorithm algorithm and public RSA key public_key.
Returns TRUE if the signature is verified, and FALSE otherwise. Can be paired
with llSignRSA to validate the authenticity of messages from other LSL scripts.

This function supports sha1, sha224, sha256, sha384, sha512 for algorithm.">
				<Param name="string public_key" />
				<Param name="string msg" />
				<Param name="string signature" />
				<Param name="string algorithm" />
			</Overload>
		</KeyWord>

		<KeyWord name="llVolumeDetect" func="yes">
			<Overload retVal="void" descr="If detect is TRUE, VolumeDetect is enabled, physical object and
avatars can pass through the object.

This works much like Phantom, but unlike Phantom, VolumeDetect objects trigger
collision_start and collision_end events when interpenetrating. Collision events
will trigger in any script in the object.">
				<Param name="boolean detect" />
			</Overload>
		</KeyWord>

		<KeyWord name="llWanderWithin" func="yes">
			<Overload retVal="void" descr="Sets a character to wander about a central spot within a specified
radius.">
				<Param name="vector origin" />
				<Param name="vector dist" />
				<Param name="list options" />
			</Overload>
		</KeyWord>

		<KeyWord name="llWater" func="yes">
			<Overload retVal="float" descr="Returns a float that is the water height below the prim's
position + offset.

The requested position needs to be in the same region. Only the x and y
coordinates in offset are important, the z component is ignored. Water height is
constant across each entire sim and is typically 20 meters but not always.">
				<Param name="vector offset" />
			</Overload>
		</KeyWord>

		<KeyWord name="llWhisper" func="yes">
			<Overload retVal="void" descr="Whispers the text supplied in message on channel.">
				<Param name="integer channel" />
				<Param name="string message" />
			</Overload>
		</KeyWord>

		<KeyWord name="llWind" func="yes">
			<Overload retVal="vector" descr="Returns a vector that is the wind velocity at the prim's
position + offset.

The requested position needs to be in the same region. Only the x and y
coordinates in offset are important, the z component is ignored.">
				<Param name="vector offset" />
			</Overload>
		</KeyWord>

		<KeyWord name="llWorldPosToHUD" func="yes">
			<Overload retVal="vector" descr="Returns a vector position in HUD frame that would place the
center of the HUD object directly over world_pos as viewed by the current camera.

* vector world_pos

To run this function the script must request the PERMISSION_TRACK_CAMERA permission with llRequestPermissions.">
				<Param name="vector world_pos" />
			</Overload>
		</KeyWord>

		<KeyWord name="llXorBase64" func="yes">
			<Overload retVal="string" descr="Correctly performs an exclusive or on two Base 64 strings.

Returns a string that is a Base64 XOR of str1 and str2. str2 repeats if it is
shorter than str1. If the inputs are not Base64 strings the result will be
erratic.

Be sure to read the Cryptography section before designing a cryptographic
algorithm.">
				<Param name="string str1" />
				<Param name="string str2" />
			</Overload>
		</KeyWord>

		<KeyWord name="money" func="yes">
			<Overload descr="Triggered when money is paid to the prim in the amount by id.">
				<Param name="key id" />
				<Param name="integer amount" />
			</Overload>
		</KeyWord>

		<KeyWord name="moving_end" func="yes">
			<Overload descr="Triggered when task stops moving." />
		</KeyWord>

		<KeyWord name="moving_start" func="yes">
			<Overload descr="Triggered when task starts moving." />
		</KeyWord>

		<KeyWord name="no_sensor" func="yes">
			<Overload descr="Result of a call to llSensor or llSensorRepeat." />
		</KeyWord>

		<KeyWord name="not_at_rot_target" func="yes">
			<Overload descr="Result of llRotTarget library function call." />
		</KeyWord>

		<KeyWord name="not_at_target" func="yes">
			<Overload descr="Triggered if an object has not yet reached the target set by the call to
llTarget. This event my be triggered multiple times if the target has not been
reached." />
		</KeyWord>

		<KeyWord name="object_rez" func="yes">
			<Overload descr="Triggered when the object rezzes an object.">
				<Param name="key id" />
			</Overload>
		</KeyWord>

		<KeyWord name="on_rez" func="yes">
			<Overload descr="Triggered when an object is rezzed (by script or by user). Also triggered in
attachments when a user logs in, or when the object is attached from inventory.">
				<Param name="integer start_param" />
			</Overload>
		</KeyWord>

		<KeyWord name="path_update" func="yes">
			<Overload descr="Triggered by an active pathfinding character when pathfinding events occur.">
				<Param name="integer type" />
				<Param name="list reserved" />
			</Overload>
		</KeyWord>

		<KeyWord name="quaternion" />

		<KeyWord name="remote_data" func="yes">
			<Overload descr="Triggered by various XML-RPC calls.">
				<Param name="integer event_type" />
				<Param name="key channel" />
				<Param name="key message_id" />
				<Param name="string sender" />
				<Param name="integer idata" />
				<Param name="string sdata" />
			</Overload>
		</KeyWord>

		<KeyWord name="return" />

		<KeyWord name="rotation" />

		<KeyWord name="run_time_permissions" func="yes">
			<Overload descr="Triggered when an agent grants run time permissions to task.">
				<Param name="integer perm" />
			</Overload>
		</KeyWord>

		<KeyWord name="sensor" func="yes">
			<Overload descr="Results from a call to either llSensor or llSensorRepeat.">
				<Param name="integer num_detected" />
			</Overload>
		</KeyWord>

		<KeyWord name="state" />

		<KeyWord name="state_entry" func="yes">
			<Overload descr="Triggered on any state transition and startup." />
		</KeyWord>

		<KeyWord name="state_exit" func="yes">
			<Overload descr="Triggered on a qualifying state transition." />
		</KeyWord>

		<KeyWord name="string" />

		<KeyWord name="timer" func="yes">
			<Overload descr="Repeats the code in the timer(). Result of the llSetTimerEvent library function
call." />
		</KeyWord>

		<KeyWord name="touch" func="yes">
			<Overload descr="Triggered whilst an agent is clicking the task. It will continue to be triggered
until the prim/object is stopped being clicked (triggers multiple times).">
				<Param name="integer num_detected" />
			</Overload>
		</KeyWord>

		<KeyWord name="touch_end" func="yes">
			<Overload descr="Triggered when agent stops clicking on task.">
				<Param name="integer num_detected" />
			</Overload>
		</KeyWord>

		<KeyWord name="touch_start" func="yes">
			<Overload descr="Triggered when agent starts clicking on task.">
				<Param name="integer num_detected" />
			</Overload>
		</KeyWord>

		<KeyWord name="transaction_result" func="yes">
			<Overload descr="Triggered when task receives asynchronous data.">
				<Param name="key id" />
				<Param name="integer success" />
				<Param name="string data" />
			</Overload>
		</KeyWord>

		<KeyWord name="vector" />

		<KeyWord name="while" />
	</AutoComplete>
</NotepadPlus>
